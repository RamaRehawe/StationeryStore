﻿@{
    ViewData["Title"] = "مدير المنتجات";
}
<!DOCTYPE html>
<html lang="ar" dir="rtl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>مدير المنتجات</title>
    <link rel="stylesheet" href="~/CSS/Styles.css">
    <link rel="stylesheet" href="~/CSS/Styles1.css">
    <link rel="icon" href="~/Images/ICO.png" type="image/png">
    <script src="~/Javascript/Functions.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<body>
    <a href="front_home">
        <img class="logo" src="~/Images/logo.png" alt="logo">
    </a>
    <div class="logout-icon">
        <a onclick="logout()" id="logoutLink">
            <img src="~/Images/log-out.png" alt="Logout">
            <span id="logout-text"> تسجيل الخروج</span>
        </a>
    </div>
    <main>
        <div id="sidebar">
            <a href="#section2" onclick="showSection('section2')"> إضافة فئة فرعية جديدة</a>
            <a href="#section3" onclick="showSection('section3')">إضافة منتج  </a>
            <a href="#section4" onclick="showSection('section4')">إضافة تفاصيل المنتج</a>
            <a href="#section5" onclick="showSection('section5')">عرض المنتجات</a>
            <a href="#section6" onclick="showSection('section6')">تعديل المنتجات</a>
        </div>

        <div id="content">
            <div id="section1" class="section active-section">
                <h2> مدير المنتجات</h2>
                <h3>
                    مدير المنتجات دوره هاماً وأساسياً في المتجر حيث يقوم بالمهام التالية:
                    إضافة فئات فرعية جديدة إلى المتجر في حال إضافة منتجات لا يتوفر لها فئة فرعية.
                    إضافة منتجات جديدة، مع تعريف خصائصها، الوصف، الكمية، السعر، الصور الخاصة بكل منتج. مع العمل على تعديل كميات وأسعار المنتجات المتوافرة ضمن المتجر.

                </h3>
                <img src="~/Images/itemmanger.png" alt="Description of the image" style="width: 70%;">
            </div>
            <div id="section2" class="section">
                <form>
                    <div class="section-header">
                        <h2>أضف فئة جديدة</h2>
                        <div class="section-actions">
                            <span class="save-icon" onclick="saveChanges('section2')" style="display: none;">💾</span>
                            <span class="add-category-icon" onclick="toggleAddCategoryFields()" style="display: none;">➕</span> <!-- أيقونة لإظهار/إخفاء حقول الإضافة -->
                        </div>
                    </div>
                    <p>التفاصيل ...</p>
                    <label for="itemName">اسم الفئة:</label>
                    <input type="text" id="itemName" required><br>
                    <label for="itemParent">القسم التابع لها:</label>
                    <br>
                    <select id="itemParent">
                    </select>
                    <br><br>
                    <button onclick="addNewSubCategory()">إضافة</button>
                </form>
            </div>
            <div id="section3" class="section">
                <form>
                    <div class="section-header">
                        <h2>أضف منتج جديد</h2>
                        <div class="section-actions">
                            <span class="save-icon" onclick="saveChanges('section3')" style="display: none;">💾</span>
                        </div>
                    </div>
                    <p>تفاصيل المنتج...</p>
                    <label for="proudectName">اسم المنتج:</label>
                    <input type="text" id="proudectName"><br>
                    <label for="itemDescription">الوصف:</label>
                    <input type="text" id="itemDescription"><br>
                    <label for="itemParentsub">الفئة التابع لها:</label>
                    <br>
                    <select id="itemParentsub">
                    </select>
                    <br><br>
                    <button onclick="addNewItem()">إضافة منتج جديد</button>
                </form>
            </div>

            <div id="section4" class="section">
                <form id="form">
                    <fieldset>
                        <legend>البيانات</legend>
                        <div>
                            <label for="productImage">صورة المنتج:</label>
                            <input type="file" id="productImage" name="productImage" accept="image/*" required>
                        </div>
                        <div>
                            <label for="itemQuantity">الكمية:</label>
                            <input type="number" id="itemQuantity" name="quantity" required>
                        </div>
                        <div>
                            <label for="itemPrice">السعر:</label>
                            <input type="number" id="itemPrice" name="price" step="1000" required>
                        </div>
                        <div>
                            <label for="productId">اختر المنتج:</label>
                            <select id="productId" name="productId">
                            </select>
                        </div>
                        <div>
                            <label for="attributeName">اسم الخاصية:</label>
                            <input type="text" id="attributeName" name="name" required>
                        </div>
                        <div>
                            <label for="attributeValue">قيمة الخاصية:</label>
                            <input type="text" id="attributeValue" name="value" required>
                        </div>
                    </fieldset>
                    <button type="submit">حفظ</button>
                </form>


            </div>
            <div id="section5" class="section">
                <h1>قائمة المنتجات</h1>
                <table>
                    <thead>
                        <tr>
                            <th>الرقم التسلسلي</th>
                            <th>اسم المنتج</th>
                            <th>الوصف</th>
                            <th>السعر</th>
                            <th>الكمية المتاحة</th>
                        </tr>
                    </thead>
                    <tbody id="productsTableBody">
                    </tbody>
                </table>
            </div>
            <div id="section6" class="section">
                <h2>محتوى المنتجات</h2>
                <p>تستطيع التعديل على المنتجات</p>
                <ul id="itemList">
                    <!-- Product items will be dynamically added here using JavaScript -->
                </ul>
            </div>
        </div>
    </main>

    <footer>
        <p dir="ltr">&copy; 2024 - جميع الحقوق محفوظة</p>
        |
        <a href="front_privacy_policy">سياسة الخصوصية</a>

        <a href="front_about">من نحن</a>
        |
        <div class="social-links">
            <strong>تواصل معنا:</strong>
            <a href="@(Url.Content("https://youtube.com/@-StationeryStore?si=XlmT8B-DREJrxxNw"))">
                <img src="~/Images/Youtube.png" alt="Youtube Icon">
            </a>

            <a href="https://www.facebook.com/profile.php?id=61558642717289&mibextid=ZbWKwL">
                <img src="~/Images/facebook-icon.png" alt="Facebook Icon">
            </a>

            <a href="https://web.whatsapp.com/">
                <img src="~/Images/phone-call.png" alt="Phone Icon">
            </a>

        </div>
    </footer>
    <script>

        // document.addEventListener('DOMContentLoaded', function () {
        //     const form = document.getElementById('form');

        //     form.addEventListener('submit', function (event) {
        //         event.preventDefault();
        //         // Retrieve the authentication token from localStorage
        //         const authToken = localStorage.getItem('authToken');
        //         const formData = new FormData(form);

        //         // Add authentication token to the request headers
        //         const headers = new Headers();
        //         headers.append('Authorization', 'Bearer ' + authToken);

        //         fetch('/api/Attribute/addDetails', {
        //             method: 'POST',
        //             headers: headers,
        //             body: formData
        //         })
        //             .then(response => {
        //                 if (!response.ok) {
        //                     throw new Error('Network response was not ok');
        //                 }
        //                 return response.json();
        //             })
        //             .then(data => {
        //                 // Handle successful response from server
        //                 console.log(data);
        //                 alert('Data submitted successfully!');
        //             })
        //             .catch(error => {
        //                 // Handle error
        //                 console.error('There was an error!', error);
        //                 alert('An error occurred while submitting data.');
        //             });
        //     });
        // });

        // // //
        // document.getElementById('form').addEventListener('submit', async function (event) {
        //     event.preventDefault(); // Prevent default form submission

        //     // Retrieve the authentication token from localStorage
        //     const authToken = localStorage.getItem('authToken');

        //     // Retrieve the selected values from the dropdown lists
        //     const productId = document.getElementById('productId').value;

        //     // Retrieve other form field values
        //     const imageFile = document.getElementById('productImage').files[0];
        //     const itemQuantity = document.getElementById('itemQuantity').value;
        //     const itemPrice = document.getElementById('itemPrice').value;
        //     const attributeName = document.getElementById('attributeName').value;
        //     const attributeValue = document.getElementById('attributeValue').value;

        //     // Validate form fields
        //     if (!imageFile || !productId || !itemQuantity || !itemPrice || !attributeName || !attributeValue) {
        //         alert("يرجى ملء جميع الحقول");
        //         return false;
        //     }
            
        //     // Confirm saving
        //     const confirmation = confirm("هل تريد حفظ هذه المعلومات؟");
        //     if (!confirmation) return false;
        //     // Create a new FormData object
        //     const formData = new FormData();

        //     // Append the selected values from the dropdown lists to the FormData object
        //     formData.append('productId', productId);

        //     // Append other form field values to the FormData object
        //     formData.append('imageFile', imageFile);
        //     formData.append('itemQuantity', itemQuantity);
        //     formData.append('itemPrice', itemPrice);
        //     formData.append('attributeName', attributeName);
        //     formData.append('attributeValue', attributeValue);

           

        //     try {
        //         // Send the form data using Fetch API
        //         const response = await fetch('https://localhost:7214/api/Attribute/addDetails', {
        //             method: 'POST',
        //             body: formData,
        //             headers: {
        //                 'Authorization': 'Bearer ' + authToken // Add authorization token to headers
        //             }
        //         });
        //         if (!response.ok) {
        //             throw new Error('Failed to submit form');
        //         }
        //         const data = await response.json();
        //         // Handle success response
        //         console.log(data);
        //         alert('Form submitted successfully!');
        //     } catch (error) {
        //         // Handle error
        //         console.error('Error:', error);
        //         alert('Failed to submit form');
        //     }
        // });


        // var itemQuantity = document.getElementById("itemQuantity").value;
        // var itemPrice = document.getElementById("itemPrice").value;
        // var productId = document.getElementById("productId").value;
        // var existingPropertyElement = document.getElementById("existing_property");
        // var existingPropertyText = existingPropertyElement.options[existingPropertyElement.selectedIndex].textContent;
        // var propertyValueDropdown = document.getElementById("property_value_dropdown").value;
        // var imageFile = document.querySelector('.image-input').files[0];
        // var confirmation = confirm("Do you want to save this information?");
        // if (confirmation) {
        //     const formData = new FormData();
        //     formData.append('formFile', imageFile);
        //     formData.append('attributeDto.ProductId', productId);
        //     formData.append('attributeDto.Quantity', itemQuantity);
        //     formData.append('attributeDto.Price', itemPrice);
        //     formData.append('attributeDto.Name', existingPropertyText);
        //     formData.append('attributeDto.Value', propertyValueDropdown);
        // const authToken = localStorage.getItem('authToken');
        // form.addEventListener('submit', function (e) {
        //     // Prevent default behavior
        //     e.preventDefault();
        //     // Create new FormData object
        //     const formData = new FormData(form);
        //     // Convert formData object to URL-encoded string
        //     const payload = new URLSearchParams(formData);
        //     // Post the payload using Fetch
        //     fetch('/api/Attribute/addDetails', {
        //         method: 'POST',
        //         body: payload,
        //         headers: {
        //                                 'Authorization': 'Bearer ' + authToken
        //                             }
        //     })
        //         .then(res => res.json())
        //         .then(data => console.log(data))
        // })
        // }) ()
        // const form = document.getElementById('form');

        // form.addEventListener('submit', function (e) {
        //     e.preventDefault()
        // })
        // function addProductDetails() {
        //     var existingPropertyElement = document.getElementById("existing_property");
        //     var selectedIndex = existingPropertyElement.selectedIndex;
        //     var selectedOption = existingPropertyElement.options[selectedIndex];
        //     var selectedName = selectedOption.textContent;

        //     var formData = new FormData();
        //     formData.append('imageFile', document.querySelector('.image-input').files[0]);
        //     formData.append('itemQuantity', document.getElementById("itemQuantity").value);
        //     formData.append('itemPrice', document.getElementById("itemPrice").value);
        //     formData.append('productId', document.getElementById("productId").value);
        //     formData.append('selectedName', selectedName); // Add selectedName to the formData
        //     formData.append('propertyValue', document.getElementById("property_value_dropdown").value);

        //     // Validate form fields
        //     if (!formData.get('imageFile') || !formData.get('productId') || !formData.get('itemQuantity') || !formData.get('itemPrice') || !selectedName || !formData.get('propertyValue')) {
        //         alert("يرجى ملء جميع الحقول");
        //         return false;
        //     }

        //     console.log(formData);

        //     // Confirm saving
        //     var confirmation = confirm("هل تريد حفظ هذه المعلومات؟");
        //     if (!confirmation) return false;

        //     // إرسال البيانات إلى الخادم
        //     fetch('/api/Attribute/addDetails', {
        //         method: 'POST',
        //         headers: {
        //             'Authorization': 'Bearer ' + authToken
        //         },
        //         body: formData
        //     })
        //         .then(response => {
        //             if (!response.ok) {
        //                 throw new Error('Failed to save product details');
        //             }
        //             return response.json();
        //         })
        //         .then(data => {
        //             console.log('Product details saved:', data);
        //             alert("Saved successfully!");
        //             // Reset form fields here if needed
        //             document.getElementById("productId").value = "";
        //             document.getElementById("itemQuantity").value = "";
        //             document.getElementById("itemPrice").value = "";
        //             document.getElementById("existing_property").selectedIndex = 0; // Reset dropdown to the first option
        //             document.getElementById("property_value_dropdown").value = "";
        //         })
        //         .catch(error => {
        //             console.error('Error saving product details:', error.message);
        //         });
        // }


        // const authToken = localStorage.getItem('authToken');
        // console.log(authToken);

        // function handleSubmit(event) {
        //     event.preventDefault(); // Prevent default form submission behavior

        //     var imageFile = document.querySelector('.image-input').files[0];
        //     var itemQuantity = document.getElementById("itemQuantity").value;
        //     var itemPrice = document.getElementById("itemPrice").value;
        //     var productId = document.getElementById("productId").value;
        //     var existingPropertyElement = document.getElementById("existing_property");
        //     var existingPropertyText = existingPropertyElement.options[existingPropertyElement.selectedIndex].textContent;
        //     var propertyValueDropdown = document.getElementById("property_value_dropdown").value;
        //     var propertyValue = document.getElementById("property_value").value;

        //     // Validate form fields
        //     if (!imageFile || !productId || !itemQuantity || !itemPrice || !existingPropertyText || !propertyValue) {
        //         alert("يرجى ملء جميع الحقول");
        //         return false;
        //     } else {
        //         // Confirm saving
        //         var confirmation = confirm("هل تريد حفظ هذه المعلومات؟");
        //         if (confirmation) {
        //             // Construct form data object
        //             const formData = new FormData();
        //             formData.append('productImage', imageFile);
        //             formData.append('itemQuantity', itemQuantity);
        //             formData.append('itemPrice', itemPrice);
        //             formData.append('productId', productId);
        //             formData.append('existing_property', existingPropertyText); // Corrected key
        //             if (propertyValueDropdown !== "") {
        //                 // If a value is selected from the dropdown list, use it
        //                 formData.append('propertyValue', propertyValueDropdown);
        //             } else {
        //                 // If no value is selected, use the value from the input field
        //                 formData.append('propertyValue', propertyValue);
        //             }


        //             // Make an AJAX POST request to save the data
        //             fetch('/api/Attribute/addDetails', {
        //                 method: 'POST',
        //                 body: formData,
        //                 headers: {
        //                     'Authorization': 'Bearer ' + authToken
        //                 }
        //             })
        //                 .then(response => {
        //                     if (!response.ok) {
        //                         throw new Error('Failed to save product details');
        //                     }
        //                     return response.json();
        //                 })
        //                 .then(data => {
        //                     // Handle successful response
        //                     console.log('Product details saved:', data);
        //                     // Optionally, display a success message to the user
        //                     alert("تم الحفظ بنجاح!");
        //                     // Clear fields
        //                     document.getElementById("productId").value = "";
        //                     document.getElementById("itemQuantity").value = "";
        //                     document.getElementById("itemPrice").value = "";
        //                     document.getElementById("existing_property").selectedIndex = 0; // Reset dropdown to the first option
        //                     document.getElementById("property_value_dropdown").value = "";
        //                     document.getElementById("property_value").value = "";
        //                 })
        //                 .catch(error => {
        //                     console.error('Error saving product details:', error.message);
        //                     // Handle the error, e.g., display an error message to the user
        //                 });
        //         } else {
        //             // Cancel saving
        //             return false;
        //         }
        //     }
        // }


        // // Function to handle file selection
        // function handleFileSelect(event) {
        //     const file = event.target.files[0]; // Get the selected file
        //     const imageInputsContainer = document.getElementById('imageInputsContainer');

        //     // Remove existing image inputs
        //     imageInputsContainer.innerHTML = '';

        //     // Create a new image input element
        //     const imageInput = document.createElement('input');
        //     imageInput.type = 'file';
        //     imageInput.className = 'image-input';
        //     imageInput.name = 'productImage'; // Change the name to 'productImage' to upload a single image
        //     imageInput.accept = 'image/*';
        //     imageInput.required = true;

        //     // Add the new image input to the container
        //     imageInputsContainer.appendChild(imageInput);

        //     // Display the selected file name (optional)
        //     const fileName = document.createElement('span');
        //     fileName.textContent = file.name;
        //     imageInputsContainer.appendChild(fileName);
        // }

        // // Attach event listener to the file input element
        // const fileInput = document.querySelector('.image-input');
        // fileInput.addEventListener('change', handleFileSelect);

        // // Function to handle form submission
        // function handleSubmit(event) {
        //     event.preventDefault(); // Prevent default form submission behavior

        //     // Gather form data
        //     const productId = document.getElementById('productId').value;
        //     const itemQuantity = document.getElementById('itemQuantity').value;
        //     const itemPrice = document.getElementById('itemPrice').value;
        //     const existingProperty = document.getElementById('existing_property').value;
        //     const propertyValueDropdown = document.getElementById('property_value_dropdown').value;
        //     const propertyValue = document.getElementById('property_value').value;
        //     const imageFile = document.querySelector('.image-input').files[0];

        //     // Construct form data object
        //     const formData = new FormData();
        //     formData.append('productId', productId);
        //     formData.append('itemQuantity', itemQuantity);
        //     formData.append('itemPrice', itemPrice);
        //     formData.append('productImage', imageFile);

        //     // Conditionally append property value based on the selection
        //     if (existingProperty === 'some_condition') {
        //         // If some condition is met, use propertyValueDropdown
        //         formData.append('propertyValueDropdown', propertyValueDropdown);
        //     } else {
        //         // Otherwise, use propertyValue
        //         formData.append('propertyValue', propertyValue);
        //     }

        //     // Make an AJAX POST request to save the data
        //     fetch('/api/product/save', {
        //         method: 'POST',
        //         body: formData
        //     })
        //         .then(response => {
        //             if (!response.ok) {
        //                 throw new Error('Failed to save product details');
        //             }
        //             return response.json();
        //         })
        //         .then(data => {
        //             // Handle successful response
        //             console.log('Product details saved:', data);
        //             // Optionally, display a success message to the user
        //         })
        //         .catch(error => {
        //             console.error('Error saving product details:', error.message);
        //             // Handle the error, e.g., display an error message to the user
        //         });
        // }

        // // Attach event listener to the form submit button
        // const submitButton = document.getElementById('submitButton');
        // submitButton.addEventListener('click', handleSubmit);



        function addNewValue() {
        // تعطيل قائمة القيم
        document.getElementById('property_value_dropdown').disabled = true;

        // إزالة العناصر من قائمة القيم
        var valueDropdown = document.getElementById('property_value_dropdown');
        valueDropdown.innerHTML = '';

        // تفعيل حقل الإدخال
        document.getElementById('property_value').disabled = false;
    }
        // // استدعاء طلب API لجلب الصفات
        // fetch('/api/Attribute/getAllAttribute')
        //     .then(response => response.json())
        //     .then(data => {
        //         const selectElement = document.getElementById('existing_property');
        //         data.forEach(attribute => {
        //             const option = document.createElement('option');
        //             option.value = attribute.id;
        //             option.textContent = attribute.name;
        //             selectElement.appendChild(option);
        //         });

        //         selectElement.addEventListener('change', function () {
        //             const selectedOption = selectElement.options[selectElement.selectedIndex];
        //             const selectedId = selectedOption.value;

        //             fetch(`/api/Attribute/selectAttribute?id=${selectedId}`)
        //                 .then(response => response.json())
        //                 .then(attributeData => {
        //                     console.log('Response data:', attributeData); // Log the response data for inspection

        //                     // Handle the single attribute object
        //                     const propertyValueDropdown = document.getElementById('property_value_dropdown');
        //                     propertyValueDropdown.innerHTML = ''; // Clear the existing options

        //                     // Iterate through productAttributes array and create options for each value
        //                     attributeData.productAttributes.forEach(productAttribute => {
        //                         const option = document.createElement('option');
        //                         option.value = productAttribute.value;
        //                         option.textContent = productAttribute.value;
        //                         propertyValueDropdown.appendChild(option);
        //                     });
        //                 })
        //                 .catch(error => console.error('Error fetching attribute values:', error));



        //         });
        //     })
        //     .catch(error => console.error('Error fetching attributes:', error));
        // // استدعاء طلب API لجلب الصفات
        // fetch('/api/Attribute/getAllAttribute')
        //     .then(response => response.json())
        //     .then(data => {
        //         const selectElement = document.getElementById('existing_property');
        //         data.forEach(attribute => {
        //             const option = document.createElement('option');
        //             option.value = attribute.id;
        //             option.textContent = attribute.name;
        //             selectElement.appendChild(option);
        //         });

        //         selectElement.addEventListener('change', function () {
        //             const selectedOption = selectElement.options[selectElement.selectedIndex];
        //             const selectedId = selectedOption.value;

        //             fetch(`/api/Attribute/selectAttribute?id=${selectedId}`)
        //                 .then(response => response.json())
        //                 .then(attributeData => {
        //                     console.log('Response data:', attributeData); // Log the response data for inspection

        //                     // Handle the single attribute object
        //                     const propertyValueDropdown = document.getElementById('property_value_dropdown');
        //                     propertyValueDropdown.innerHTML = ''; // Clear the existing options

        //                     // Iterate through productAttributes array and create options for each value
        //                     attributeData.productAttributes.forEach(productAttribute => {
        //                         const option = document.createElement('option');
        //                         option.value = productAttribute.value;
        //                         option.textContent = productAttribute.value;
        //                         propertyValueDropdown.appendChild(option);
        //                     });
        //                 })
        //                 .catch(error => console.error('Error fetching attribute values:', error));



        //         });
        //     })
        //     .catch(error => console.error('Error fetching attributes:', error));
        // fetch('/api/Attribute/getAllAttribute')
        //     .then(response => response.json())
        //     .then(data => {
        //         const selectElement = document.getElementById('existing_property');
        //         data.forEach(attribute => {
        //             const option = document.createElement('option');
        //             option.value = attribute.id;
        //             option.textContent = attribute.name;
        //             selectElement.appendChild(option);
        //         });

        //         selectElement.addEventListener('change', function () {
        //             const selectedOption = selectElement.options[selectElement.selectedIndex];
        //             const selectedId = selectedOption.value;

        //             if (selectedId === 'other') {
        //                 // إذا تم اختيار "أخرى"، قم بتفعيل حقل الإدخال وتعطيل قائمة القيم
        //                 document.getElementById('property_value').disabled = false;
        //                 document.getElementById('property_value_dropdown').disabled = true;
        //             } else {
        //                 // إذا تم اختيار خيار آخر، قم بجلب القيم من API وملء قائمة القيم
        //                 fetch(`/api/Attribute/selectAttribute?id=${selectedId}`)
        //                     .then(response => response.json())
        //                     .then(attributeData => {
        //                         console.log('Response data:', attributeData); // Log the response data for inspection

        //                         // Handle the single attribute object
        //                         const propertyValueDropdown = document.getElementById('property_value_dropdown');
        //                         propertyValueDropdown.innerHTML = ''; // Clear the existing options

        //                         // Iterate through productAttributes array and create options for each value
        //                         attributeData.productAttributes.forEach(productAttribute => {
        //                             const option = document.createElement('option');
        //                             option.value = productAttribute.value;
        //                             option.textContent = productAttribute.value;
        //                             propertyValueDropdown.appendChild(option);
        //                         });

        //                         // تفعيل قائمة القيم وتعطيل حقل الإدخال
        //                         document.getElementById('property_value_dropdown').disabled = false;
        //                         document.getElementById('property_value').disabled = true;
        //                     })
        //                     .catch(error => console.error('Error fetching attribute values:', error));
        //             }
        //         });
        //     })
        //     .catch(error => console.error('Error fetching attributes:', error));

        // // Function to fetch categories and populate the main category select element
        // function fetchCategories() {
        //     fetch('/api/Category')
        //         .then(response => response.json())
        //         .then(data => {
        //             const mainCategorySelect = document.getElementById('mainCategory');
        //             data.forEach(category => {
        //                 const option = document.createElement('option');
        //                 option.value = category.id;
        //                 option.textContent = category.name;
        //                 mainCategorySelect.appendChild(option);
        //             });
        //             // Trigger change event to populate subcategories based on the selected main category
        //             mainCategorySelect.dispatchEvent(new Event('change'));
        //         })
        //         .catch(error => console.error('Error fetching categories:', error));
        // }
        // Function to fetch categories and populate the main category select element
        function fetchCategories() {
            fetch('/api/Category')
                .then(response => response.json())
                .then(data => {
                    const mainCategorySelect = document.getElementById('mainCategory');
                    data.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category.id;
                        option.textContent = category.name;
                        mainCategorySelect.appendChild(option);
                    });
                    // Trigger change event to populate subcategories based on the selected main category
                    mainCategorySelect.dispatchEvent(new Event('change'));
                })
                .catch(error => console.error('Error fetching categories:', error));
        }

        // Function to fetch subcategories based on the selected main category
        function fetchSubcategories(categoryId) {
            fetch(`/api/Category/${categoryId}`)
                .then(response => response.json())
                .then(data => {
                    const subCategorySelect = document.getElementById('subCategory');
                    // Clear existing options
                    subCategorySelect.innerHTML = '';
                    data.subCategories.forEach(subCategory => {
                        const option = document.createElement('option');
                        option.value = subCategory.id;
                        option.textContent = subCategory.name;
                        subCategorySelect.appendChild(option);
                    });
                    // Trigger change event to fetch products based on the selected subcategory
                    subCategorySelect.dispatchEvent(new Event('change'));
                })
                .catch(error => console.error('Error fetching subcategories:', error));
        }

        // Function to fetch products based on the selected subcategory
        function fetchProducts(subcategoryId) {
            // Fetch products based on subcategoryId and populate the product select element
            // Implement this part according to your API endpoint and logic
        }

        // Function to fetch products based on the selected subcategory using subId
        function fetchProductsBySubId(subId) {
            fetch(`/api/Product/subId?subId=${subId}`)
                .then(response => response.json())
                .then(data => {
                    const selectElement = document.getElementById('productId');
                    // Clear existing options
                    selectElement.innerHTML = '';
                    data.forEach(product => {
                        // Assuming each product has only one productAttributeQuantity for simplicity
                        const productAttributeQuantity = product.productAttributeQuantities[0];
                        const option = document.createElement('option');
                        option.value = product.id; // Use the actual product id here
                        option.textContent = `${product.name}`; // Display product name
                        selectElement.appendChild(option);
                    });
                })
                .catch(error => console.error('Error fetching products with quantity:', error));
        }

        // Populate main categories when the page loads
        // window.addEventListener('load', fetchCategories);

        // // When the main category selection changes, fetch subcategories
        // document.getElementById('mainCategory').addEventListener('change', function () {
        //     const categoryId = this.value;
        //     fetchSubcategories(categoryId);
        // });

        // When the subcategory selection changes, fetch products using subId
        // document.getElementById('subCategory').addEventListener('change', function () {
        //     const subId = this.value;
        //     fetchProductsBySubId(subId);
        // });



        // استدعاء طلب API لجلب المنتجات مع الكمية
        fetch('/api/Product')
            .then(response => response.json())
            .then(data => {
                // عرض أسماء المنتجات في قائمة
                const selectElement = document.getElementById('productId');
                // Clear existing options
                selectElement.innerHTML = '';
                data.forEach(product => {
                    // Assuming each product has only one productAttributeQuantity for simplicity
                    const productAttributeQuantity = product.productAttributeQuantities[0];
                    const option = document.createElement('option');
                    option.value = product.id; // Use the actual product id here
                    option.textContent = `${product.name}`; // Display product name and quantity
                    selectElement.appendChild(option);
                });
            })
            .catch(error => console.error('Error fetching products with quantity:', error));

        // // استدعاء طلب API لجلب الفئات الفرعية
        // fetch('/api/SubCategory')
        //     .then(response => response.json())
        //     .then(data => {
        //         // عرض الفئات الفرعية كخيارات داخل عنصر select
        //         const selectElement = document.getElementById('subCategory');
        //         data.forEach(subCategory => {
        //             const option = document.createElement('option');
        //             option.value = subCategory.id;
        //             option.textContent = subCategory.name;
        //             selectElement.appendChild(option);
        //         });
        //     })
        //     .catch(error => console.error('Error fetching subcategories:', error));

        // // استدعاء طلب API لجلب الفئات
        // fetch('/api/Category')
        //     .then(response => response.json())
        //     .then(data => {
        //         // عرض الفئات كخيارات داخل عنصر select
        //         const selectElement = document.getElementById('mainCategory');
        //         data.forEach(category => {
        //             const option = document.createElement('option');
        //             option.value = category.id;
        //             option.textContent = category.name;
        //             selectElement.appendChild(option);
        //         });
        //     })
        //     .catch(error => console.error('Error fetching categories:', error));

        
            // // استدعاء طلب API لجلب المنتجات مع الكمية باستخدام subId
            // function fetchProductsBySubId(subId) {
            //     fetch(`/api/Product/subId?subId=${subId}`)
            //         .then(response => response.json())
            //         .then(data => {
            //             // عرض أسماء المنتجات في قائمة
            //             const selectElement = document.getElementById('productId');
            //             // Clear existing options
            //             selectElement.innerHTML = '';
            //             data.forEach(product => {
            //                 // Assuming each product has only one productAttributeQuantity for simplicity
            //                 const productAttributeQuantity = product.productAttributeQuantities[0];
            //                 const option = document.createElement('option');
            //                 option.value = product.id; // Use the actual product id here
            //                 option.textContent = `${product.name}`; // Display product name 
            //                 selectElement.appendChild(option);
            //             });
            //         })
            //         .catch(error => console.error('Error fetching products with quantity:', error));
            // }

            // // عند تغيير الفئة الفرعية، قم بجلب المنتجات المرتبطة بها باستخدام ال subId
            // document.getElementById('subCategory').addEventListener('change', function () {
            //     const subId = this.value;
            //     fetchProductsBySubId(subId);
            // });

        // // عند تغيير الفئة الفرعية، قم بجلب المنتجات المرتبطة بها
        // document.getElementById('subCategory').addEventListener('change', function () {
        //     const subcategoryId = this.value;
        //     console.log(subcategoryId);
        //     fetchProductsBySubcategory(subcategoryId);
        // });

        // // استماع لتغيير القيمة المحددة في القائمة المنسدلة
        // document.getElementById('productId').addEventListener('change', function () {
        //     const productId = this.value;
        //     // استدعاء طلب API لجلب الكمية والسعر للمنتج المحدد
        //     fetch('/api/Product/{productId}')
        //         .then(response => response.json())
        //         .then(data => {
        //             // تحديث حقول الكمية والسعر بالقيم المسترجعة
        //             document.getElementById('itemQuantity').value = data.quantity;
        //             document.getElementById('itemPrice').value = data.price;
        //         })
        //         .catch(error => console.error('Error fetching product details:', error));
        // });


        // // استدعاء طلب API لجلب الفئات الفرعية
        // fetch('/api/SubCategory')
        //     .then(response => response.json())
        //     .then(data => {
        //         // عرض الفئات الفرعية كخيارات داخل عنصر select
        //         const selectElement = document.getElementById('subCategory');
        //         data.forEach(subCategory => {
        //             const option = document.createElement('option');
        //             option.value = subCategory.id;
        //             option.textContent = subCategory.name;
        //             selectElement.appendChild(option);
        //         });
        //     })
        //     .catch(error => console.error('Error fetching subcategories:', error));
        // // استدعاء طلب API لجلب الفئات
        // fetch('/api/Category')
        //     .then(response => response.json())
        //     .then(data => {
        //         // عرض الفئات كخيارات داخل عنصر select
        //         const selectElement = document.getElementById('mainCategory');
        //         data.forEach(category => {
        //             const option = document.createElement('option');
        //             option.value = category.id;
        //             option.textContent = category.name;
        //             selectElement.appendChild(option);
        //         });
        //     })
        //     .catch(error => console.error('Error fetching categories:', error));

        // تعريف متغير لتخزين رقم الفئة المحددة
        let selectedCategoryId = null;

        // استدعاء طلب API لجلب الفئات
        fetch('/api/Category')
            .then(response => response.json())
            .then(data => {
                // عرض الفئات كخيارات داخل عنصر select
                const selectElement = document.getElementById('itemParent');
                data.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.textContent = category.name;
                    selectElement.appendChild(option);
                });
            })
            .catch(error => console.error('Error fetching categories:', error));

        // إضافة مستمع لحدث تغيير القيمة في عنصر select
        document.getElementById('itemParent').addEventListener('change', function () {
            // تحديث قيمة المتغير عند تغيير الفئة المحددة
            selectedCategoryId = this.value;
        });

        // دالة إضافة الفئة الفرعية
        function addNewSubCategory() {
            const itemName = document.getElementById('itemName').value;

            // التحقق مما إذا كانت الفئة المحددة غير فارغة
            if (selectedCategoryId === undefined) {
                alert('يرجى اختيار الفئة أولاً.');
                return;
            }

            // إنشاء كائن يحتوي على البيانات المدخلة
            const subCategoryData = {
                Name: itemName,
                CategoryId: selectedCategoryId
            };
           

            // إرسال طلب POST إلى واجهة البرمجة API
            fetch('/api/SubCategory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(subCategoryData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('فشلت عملية إضافة الفئة الفرعية');
                    }
                    // عرض رسالة نجاح للمستخدم
                    alert('تمت إضافة الفئة الفرعية بنجاح!');
                    // تفريغ محتوى حقول الإدخال بعد النجاح
                    document.getElementById('itemName').value = '';
                    // document.getElementById('itemParent').selectedIndex = 0; // إعادة تحديد القيمة الافتراضية لعنصر الاختيار
                })
                .catch(error => {
                    console.error('خطأ:', error);
                    // عرض رسالة خطأ للمستخدم
                    alert('تمت إضافة الفئة الفرعية بنجاح!');
                });
        }
        // تعريف متغير لتخزين رقم الفئة الفرعية المحددة
        let selectedSubCategoryId = null;

        // استدعاء طلب API لجلب الفئات الفرعية
        fetch('/api/SubCategory')
            .then(response => response.json())
            .then(data => {
                // عرض الفئات الفرعية كخيارات داخل عنصر select
                const selectElement = document.getElementById('itemParentsub');
                data.forEach(subCategory => {
                    const option = document.createElement('option');
                    option.value = subCategory.id;
                    option.textContent = subCategory.name;
                    selectElement.appendChild(option);
                });
            })
            .catch(error => console.error('Error fetching subcategories:', error));

        // استماع لحدث change في عنصر select للفئات الفرعية
        document.getElementById('itemParentsub').addEventListener('change', function () {
            selectedSubCategoryId = this.value; // تحديث قيمة المتغير عند تغيير القيمة المحددة في القائمة المنسدلة
        });

        // دالة إضافة منتج جديد
        function addNewItem() {
            const productName = document.getElementById('proudectName').value;
            const itemDescription = document.getElementById('itemDescription').value;
            const itemParentSub = document.getElementById('itemParentsub').value;

            const newItemData = {
                Name: productName,
                Description: itemDescription,
                SubCategoryId: itemParentSub
            };

            fetch('/api/Product', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(newItemData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to add item');
                    }
                    return response.json();
                })
                .then(data => {
                    alert('تمت إضافة المنتج بنجاح!');
                    document.getElementById('proudectName').value = '';
                    document.getElementById('itemDescription').value = '';
                    // document.getElementById('itemParentsub').selectedIndex = 0;
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('تمت إضافة المنتج بنجاح!');

                });
        }


        // function updatePropertyValues() {
        //     const selectedProperty = document.getElementById('existing_property').value;
        //     const propertyValueInput = document.getElementById('property_value');
        //     const propertyValueDropdown = document.getElementById('property_value_dropdown');

        //     // قم بتحديث القيم بناءً على الخاصية المحددة
        //     switch (selectedProperty) {
        //         case 'color':
        //             populateDropdown(propertyValueDropdown, ['أحمر', 'أخضر', 'أسود']);
        //             propertyValueInput.placeholder = 'أو أضف قيمة جديدة';
        //             break;
        //         case 'size':
        //             populateDropdown(propertyValueDropdown, ['صغير', 'متوسط', 'كبير']);
        //             propertyValueInput.placeholder = 'أو أضف قيمة جديدة';
        //             break;
        //         // يمكنك إضافة حالات إضافية للخصائص الأخرى
        //         default:
        //             // يمكنك تحديد القيم الافتراضية أو تركها فارغة
        //             populateDropdown(propertyValueDropdown, []);
        //             propertyValueInput.placeholder = '';
        //     }
        // }

        // function populateDropdown(select, values) {
        //     // مسح الخيارات الحالية
        //     select.innerHTML = '';

        //     // إضافة خيارات جديدة من القائمة
        //     values.forEach(value => {
        //         const option = document.createElement('option');
        //         option.value = value;
        //         option.text = value;
        //         select.add(option);
        //     });
        // }
        // var imageCounter = 2; // بداية عداد الصور من 2

        // document.getElementById('addImage').addEventListener('click', function () {
        //     var container = document.getElementById('imageInputsContainer');
        //     var newInput = document.createElement('input');
        //     newInput.type = 'file';
        //     newInput.className = 'image-input';
        //     newInput.name = 'productImages[]';
        //     newInput.accept = 'image/*';
        //     newInput.required = true;
        //     container.appendChild(document.createElement('br'));
        //     container.appendChild(newInput);

        //     // زيادة عداد الصور
        //     imageCounter++;
        // });
        // function addProperty() {
        //     // احصل على المنتج المحدد، واسم الخاصية، وقيمة الخاصية
        //     var productId = document.getElementById('productId').value;
        //     var propertyName = document.getElementById('propertyName').value;
        //     var propertyValue = document.getElementById('propertyValue').value;

        //     // قم بإجراء التحقق من الصحة إذا كان ذلك ضروريًا

        //     // أنشئ كائنًا لتمثيل الخاصية
        //     var property = {
        //         productId: productId,
        //         propertyName: propertyName,
        //         propertyValue: propertyValue
        //     };

        //     // يمكنك إرسال هذه البيانات إلى الخادم باستخدام AJAX أو التعامل معها كما هو مطلوب
        //     console.log(property);

        //     // قم بتفريغ حقول النموذج
        //     document.getElementById('propertyName').value = '';
        //     document.getElementById('propertyValue').value = '';
        // }
        //products info
        function fetchProducts() {
            // قم بجلب بيانات المنتجات من خلال طلب HTTP
            fetch('/api/Product')
                .then(response => response.json())
                .then(products => {
                    // قم بتحديث جدول المنتجات مع البيانات الجديدة
                    updateProductTable(products);
                    displayProducts(products);
                })
                .catch(error => console.error('حدث خطأ أثناء جلب بيانات المنتجات:', error));
        }
        function updateProductTable(products) {
            const tableBody = document.getElementById('productsTableBody');
            // قم بمسح البيانات القديمة من جدول المنتجات
            tableBody.innerHTML = '';

            // قم بإضافة البيانات الجديدة إلى جدول المنتجات
            products.forEach(product => {
                const price = product.productAttributeQuantities.length > 0 ? product.productAttributeQuantities[0].price : 'N/A';
                const row = `
                    <tr>
                        <td>${product.id}</td>
                        <td>${product.name}</td>
                        <td>${product.description}</td>
                        <td>${price}</td>
                        <td>${product.productAttributeQuantities.length > 0 ? product.productAttributeQuantities[0].quantity : 'N/A'}</td>
                    </tr>
                `;
                tableBody.innerHTML += row;
            });
        }

        // Display products in the itemList
        // Display products in the itemList with edit forms
        function displayProducts(products) {
            var itemList = document.getElementById('itemList');
            itemList.innerHTML = ''; // Clear existing items

            products.forEach(function (product) {
                var listItem = document.createElement('li');
                listItem.className = 'item';
                listItem.innerHTML = `
                          <div class="product-container">
                                <div class="product-info">
                                    <span>${product.name}</span>
                                </div>
                                <button class="editButton" data-product-id="${product.id}">تعديل</button>
                                <div class="editForm" id="editForm${product.id}" style="display: none;">
                                    <label for="editedQuantity">الكمية:</label>
                                            <input type="number" id="editedQuantity${product.id}" min="1" value="${product.productAttributeQuantities[0].quantity}">
                                    <label for="editedPrice">السعر:</label>
                                            <input type="number" id="editedPrice${product.id}" min="0" value="${product.productAttributeQuantities[0].price}">
                                    <button onclick="saveChanges(${product.id})">حفظ التعديلات</button>
                                </div>
                            </div>
                                `;
                itemList.appendChild(listItem);
            });
            // Add event listeners to edit buttons after they are created
            const editButtons = document.querySelectorAll('.editButton');
            editButtons.forEach(button => {
                button.addEventListener('click', showEditForm);
            });
        }
        // Function to show the edit form for a product
        function showEditForm(event) {
            const productId = event.target.dataset.productId;
            console.log(productId);
            const editForm = document.getElementById(`editForm${productId}`);
            editForm.style.display = 'block';
        }

        function saveChanges(productId) {
            const editedQuantity = document.getElementById(`editedQuantity${productId}`).value;
            const editedPrice = document.getElementById(`editedPrice${productId}`).value;

            const url = `/api/ProductAttributeQuantity/${productId}`;
            const data = {
                quantity: editedQuantity,
                price: editedPrice,
                productId: productId
            };

            fetch(url, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'accept': '*'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Updated successfully:', data);
                    // Optionally, you can add logic here to handle UI updates or feedback
                    alert('تم حفظ التعديلات');
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                    // Optionally, you can add error handling logic here
                    alert('حدث خطأ ما !');

                });
        }
        // Fetch products and then display them
        // function fetchProducts() {
        //     // Fetch products from the API
        //     fetch('/api/Product')
        //         .then(response => response.json())
        //         .then(products => {
        //             // Update the product table
        //             updateProductTable(products);

        //             // Display products
        //             displayProducts(products);
        //         })
        //         .catch(error => console.error('Error fetching products:', error));
        // }

        // Call fetchProducts to fetch and display products
        fetchProducts();


        // Function to save changes for a specific product
        function saveChangesByButton(button, productId, quantity, price) {

        }





        // Function to dynamically generate an edit form for a specific product
        function editProduct(productId) {
            // Fetch product details based on productId (similar to fetching products)
            var product = getProductDetails(productId);

            // Replace the listItem content with an edit form
            var listItem = document.querySelector(`.item[data-product-id="${productId}"]`);
            listItem.innerHTML = `
                                        <img src="${product.image}"  alt="${product.description}">
                                        <span>${product.name}</span>
                                        <label for="itemQuantity">الكمية:</label>
                                        <input type="number" id="itemQuantity" min="1" value="${product.quantity}">
                                        <label for="itemPrice">السعر:</label>
                                        <input type="number" id="itemPrice" min="0" value="${product.price}">
                                        <button onclick="saveChangesByButton(this, '${product.id}')">حفظ التعديلات</button>
                                        <button onclick="cancelEdit('${product.id}')">إلغاء</button>
                                    `;
        }

        // Function to cancel the edit and revert to the display mode
        function cancelEdit(productId) {
            // Fetch product details based on productId (similar to fetching products)
            var product = getProductDetails(productId);

            // Replace the edit form with the original display content
            var listItem = document.querySelector(`.item[data-product-id="${productId}"]`);
            listItem.innerHTML = `
                                        <img src="${product.image}" alt="${product.description}">
                                        <span>${product.name}</span>
                                        <label for="itemQuantity">الكمية: ${product.quantity}</label>
                                        <label for="itemPrice">السعر: ${product.price}</label>
                                        <button onclick="saveChangesByButton(this, '${product.id}')">حفظ التعديلات</button>
                                        <button onclick="editProduct('${product.id}')">تعديل</button>
                                    `;
        }

        // Function to fetch product details based on productId
        function getProductDetails(productId) {
            // You need to implement this function to fetch product details from the server
            // based on the productId and return the product object
            // Example:
            // return { id: productId, name: "Product Name", quantity: 10, price: 50, image: "product.jpg" };
        }






        // Function to filter products based on the search input
        function filterProducts() {
            var searchTerm = document.getElementById('productSearch').value.toLowerCase();
            var filteredProducts = allProducts.filter(function (product) {
                return product.name.toLowerCase().includes(searchTerm);
            });

            displayProducts(filteredProducts);
        }

        // Load products when the page is loaded
        window.onload = function () {
            fetchProducts();
            document.getElementById('productSearch').addEventListener('input', filterProducts);
        };

        function deleteSelectedItem() {
            var itemList = document.getElementById('itemList');
            var selectedItems = itemList.getElementsByClassName('selected');

            if (selectedItems.length > 0) {
                // يمكنك هنا إرسال طلب إلى الخادم لحذف العناصر من قاعدة البيانات
                for (var i = 0; i < selectedItems.length; i++) {
                    var listItem = selectedItems[i];
                    listItem.parentNode.removeChild(listItem);
                }

                // إلغاء تحديد العناصر بعد الحذف
                clearSelection();
            } else {
                alert('يرجى تحديد عنصر لحذفه.');
            }
        }

        function toggleSelection(item) {
            // تبديل حالة التحديد عند النقر على العنصر
            item.classList.toggle('selected');
        }

        function clearSelection() {
            // إلغاء تحديد جميع العناصر
            var itemList = document.getElementById('itemList');
            var items = itemList.getElementsByClassName('item');

            for (var i = 0; i < items.length; i++) {
                items[i].classList.remove('selected');
            }
        }
        function logout() {
            // حذف بيانات الدخول من Local Storage
            localStorage.removeItem('username');
            localStorage.removeItem('password');
            // إخفاء رابط تسجيل الخروج
            document.getElementById('logoutLink').style.display = 'none';
            alert('تم تسجيل الخروج بنجاح!');
            // توجيه المستخدم إلى الصفحة الرئيسية أو أي صفحة أخرى
            window.location.href = "front_home";
        }

        function showSubcategories() {
            var categorySelect = document.getElementById("itemCategory");
            var subcategorySelect = document.getElementById("itemSubcategory");
            var addNewCategorySection = document.getElementById("addNewCategory");
            var addNewSubcategorySection = document.getElementById("addNewSubcategory");

            if (categorySelect.value === "newCategory") {
                addNewCategorySection.style.display = "block";
                addNewSubcategorySection.style.display = "none";
                document.getElementById("subcategories").style.display = "none";
            } else if (subcategorySelect.value === "newSubcategory") {
                addNewSubcategorySection.style.display = "block";
                addNewCategorySection.style.display = "none";
                document.getElementById("subcategories").style.display = "none";
            } else {
                addNewCategorySection.style.display = "none";
                addNewSubcategorySection.style.display = "none";
                document.getElementById("subcategories").style.display = "block";
            }
        }

        function showProductProperties() {
            var productPropertiesElement = document.getElementById("product-properties");

            // مسح العنصر لتجنب تكرار القيم
            productPropertiesElement.innerHTML = "";

            var selectedProduct = document.getElementById("product-select").value;

            // var productProperties = {
            //     product1: {
            //         اللون: ["أحمر", "أزرق", "أخضر"],
            //         الصفحات: ["100", "50", "6"],
            //         النوع: ["غلاف صلب", "غلاف ورقي", "دفتر سلك"],
            //         الحجم: ["قياس كبير", "قياس وسط", "قياس صغير"]
            //     },
            //     product2: {
            //         اللون: ["أسود", "أبيض", "رمادي"],
            //         الصفحات: ["200", "150", "120"],
            //         النوع: ["غلاف ورقي", "غلاف بلاستيك", "دفتر عادي"],
            //         الحجم: ["قياس صغير", "قياس صغير جداً"]
            //     }
            // };

            // إنشاء وعرض الخصائص الخاصة بالمنتج المختار
            if (productProperties[selectedProduct]) {
                for (var property in productProperties[selectedProduct]) {
                    var label = document.createElement("label");
                    label.textContent = property + ":";

                    var select = document.createElement("select");
                    select.id = property;

                    for (var option of productProperties[selectedProduct][property]) {
                        var optionElement = document.createElement("option");
                        optionElement.value = option;
                        optionElement.textContent = option;
                        select.appendChild(optionElement);
                    }

                    // إضافة label و select إلى العنصر الخاص بالخصائص
                    productPropertiesElement.appendChild(label);
                    productPropertiesElement.appendChild(select);
                }

                // إظهار عنصر الخصائص بعد ملء القيم
                productPropertiesElement.style.display = "block";
            }
        }
        function updateItemQuantity() {
            var itemName = document.getElementById('itemName').value;
            var itemQuantity = document.getElementById('itemQuantity').value;

            if (itemName && itemQuantity > 0) {
                var itemList = document.getElementById('itemList');
                var existingItems = itemList.getElementsByClassName('item');

                for (var i = 0; i < existingItems.length; i++) {
                    var existingName = existingItems[i].getElementsByTagName('span')[0].textContent;

                    if (existingName === itemName) {
                        var quantitySpan = existingItems[i].getElementsByTagName('span')[1];
                        quantitySpan.textContent = `الكمية: ${itemQuantity}`;
                        break;
                    }
                }

                // Clear input fields
                document.getElementById('itemName').value = '';
                document.getElementById('itemQuantity').value = 1;
            }
        }

        function removeItem(button) {
            var listItem = button.parentNode;
            listItem.parentNode.removeChild(listItem);
        }


        function showSection(sectionId) {
            // إخفاء جميع الأقسام
            var sections = document.querySelectorAll('.section');
            sections.forEach(function (section) {
                section.classList.remove('active-section');
            });

            // إظهار القسم المحدد
            var selectedSection = document.getElementById(sectionId);
            selectedSection.classList.add('active-section');

            // إظهار زر الحفظ بشكل تلقائي في القسم المحدد
            var saveIcon = selectedSection.querySelector('.save-icon');
            if (saveIcon) {
                saveIcon.style.display = 'inline';
            }

            // إخفاء زري التعديل والحذف في القسمين section2 و section3
            if (sectionId === 'section2' || sectionId === 'section3') {
                var editIcon = selectedSection.querySelector('.edit-icon');
                var deleteIcon = selectedSection.querySelector('.delete-icon');

                if (editIcon) {
                    editIcon.style.display = 'none';
                }
                if (deleteIcon) {
                    deleteIcon.style.display = 'none';
                }
            }
        }


        function editSection(sectionId) {
            // تمكين حقول التحرير
            var section = document.getElementById(sectionId);
            var inputs = section.querySelectorAll('input, select'); // أضف الـ select هنا لتشمل حقول التحرير
            inputs.forEach(function (input) {
                input.removeAttribute('disabled');
            });

            // إظهار زر الحفظ
            var saveIcon = section.querySelector('.save-icon');
            saveIcon.style.display = 'inline';
        }


        function deleteSection(sectionId) {
            // يمكنك إضافة رمز يقوم بحذف القسم أو تنفيذ الإجراء الخاص بك هنا
            alert('تم الحذف ');
        }
        // function saveChangesByButton(button) {
        //     var listItem = button.parentNode;
        //     var itemName = listItem.querySelector('span').textContent;
        //     var itemQuantity = listItem.querySelector('input#itemQuantity').value;
        //     var itemPrice = listItem.querySelector('input#itemPrice').value;

        //     // هنا يمكنك إجراء الإجراءات اللازمة لحفظ التعديلات في قاعدة البيانات أو مكان آخر
        //     alert('تم حفظ التعديلات لـ' + itemName + ': الكمية=' + itemQuantity + '، السعر=' + itemPrice);
        // }
        // function saveChanges(sectionId) {
        //     // قم بتحديد الأقسام التي تريد تطبيق السلوك عليها
        //     var sectionsToCheck = ['section2', 'section3'];

        //     // فحص ما إذا كانت القسم الحالي ينتمي إلى الأقسام المحددة
        //     if (sectionsToCheck.includes(sectionId)) {
        //         // قم بالتحقق من تعبئة القيم
        //         var section = document.getElementById(sectionId);
        //         var itemName = section.querySelector('#itemName').value;
        //         var itemDescription = section.querySelector('#itemDescription').value;
        //         var itemParent = section.querySelector('#itemParent').value;
        //         var productImage = section.querySelector('.image-input').value;

        //         // فحص ما إذا كانت القيم فارغة
        //         if (itemName === '' || itemDescription === '' || itemParent === '' || productImage === '') {
        //             alert('يرجى تعبئة جميع الحقول قبل الحفظ');
        //             return; // توقف عن تنفيذ الوظيفة إذا لم تكن القيم معبأة بالكامل
        //         }
        //     }

        //     // تنفيذ السلوك المطلوب بناءً على الأقسام المحددة
        //     var section = document.getElementById(sectionId);
        //     var inputs = section.querySelectorAll('input');
        //     inputs.forEach(function (input) {
        //         input.setAttribute('disabled', 'true');
        //     });

        //     var saveIcon = section.querySelector('.save-icon');
        //     saveIcon.style.display = 'none';

        //     // حفظ التغييرات هنا (يمكنك إرسالها إلى الخادم أو تنفيذ الإجراء الخاص بك)
        //     alert('تم حفظ التغييرات ');

        //     // إظهار أيقونة الإضافة بعد الحفظ
        //     var addCategoryIcon = section.querySelector('.add-category-icon');
        //     addCategoryIcon.style.display = 'inline';
        // }

        window.onload = function () {
            // قم بإظهار القسم الأول الذي يحتوي على الصورة
            showSection('section1');
        };

        function toggleAddCategoryFields() {
            var section = document.getElementById('section2');
            var inputs = section.querySelectorAll('input');
            var select = section.querySelector('select');
            var saveIcon = section.querySelector('.save-icon');
            var addCategoryIcon = section.querySelector('.add-category-icon');

            // تبديل حالة حقول الإدخال وزر الحفظ وأيقونة الإضافة
            if (saveIcon.style.display === 'none') {
                // إظهار حقول الإدخال وزر الحفظ وأيقونة الإضافة
                inputs.forEach(function (input) {
                    input.removeAttribute('disabled');
                });
                select.removeAttribute('disabled');
                saveIcon.style.display = 'inline';
                addCategoryIcon.style.display = 'none';
                // تفريغ قيم حقول الإدخال
                inputs.forEach(function (input) {
                    input.value = '';
                });
            } else {
                // إخفاء حقول الإدخال وزر الحفظ وإظهار أيقونة الإضافة
                inputs.forEach(function (input) {
                    input.setAttribute('disabled', 'true');
                });
                select.setAttribute('disabled', 'true');
                saveIcon.style.display = 'none';
                addCategoryIcon.style.display = saveIcon.style.display !== 'none' ? 'inline' : 'none'; // تبديل عرض أيقونة الإضافة
            }
        }
        function logout() {
            // حذف الـ token من الجلسة
            localStorage.removeItem('authToken');

            // توجيه المستخدم إلى الصفحة الرئيسية أو أي صفحة أخرى
            window.location.href = "front_home";
        }
           



    </script>
</body>

</html>