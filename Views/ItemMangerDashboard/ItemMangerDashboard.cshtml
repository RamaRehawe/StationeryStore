@{
    ViewData["Title"] = "مدير المنتجات";
}
<!DOCTYPE html>
<html lang="ar" dir="rtl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>مدير المنتجات</title>
    <link rel="stylesheet" href="~/CSS/Styles.css">
    <link rel="stylesheet" href="~/CSS/Styles1.css">
    <link rel="icon" href="~/Images/ICO.png" type="image/png">
    <script src="~/Javascript/Functions.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<body>
    <a href="front_home">
        <img class="logo" src="~/Images/logo.png" alt="logo">
    </a>
    <div class="logout-icon">
        <a onclick="logout()" id="logoutLink">
            <img src="~/Images/log-out.png" alt="Logout">
            <span id="logout-text"> تسجيل الخروج</span>
        </a>
    </div>
    <main>
        <div id="sidebar">
            <a href="#section2" onclick="showSection('section2')"> إضافة فئة فرعية جديدة</a>
            <a href="#section3" onclick="showSection('section3')">إضافة منتج  </a>
            <a href="#section4" onclick="showSection('section4')">إضافة تفاصيل المنتج</a>
            <a href="#section5" onclick="showSection('section5')">عرض المنتجات</a>
            <a href="#section6" onclick="showSection('section6')">تعديل المنتجات</a>
        </div>

        <div id="content">
            <div id="section1" class="section active-section">
                <h2> مدير المنتجات</h2>
                <h3>
                    مدير المنتجات دوره هاماً وأساسياً في المتجر حيث يقوم بالمهام التالية:
                    إضافة فئات فرعية جديدة إلى المتجر في حال إضافة منتجات لا يتوفر لها فئة فرعية.
                    إضافة منتجات جديدة، مع تعريف خصائصها، الوصف، الكمية، السعر، الصور الخاصة بكل منتج. مع العمل على تعديل كميات وأسعار المنتجات المتوافرة ضمن المتجر.

                </h3>
                <img src="~/Images/itemmanger.png" alt="Description of the image" style="width: 70%;">
            </div>
            <div id="section2" class="section">
                <form>
                    <div class="section-header">
                        <h2>أضف فئة جديدة</h2>
                        <div class="section-actions">
                            <span class="save-icon" onclick="saveChanges('section2')" style="display: none;">💾</span>
                            <span class="add-category-icon" onclick="toggleAddCategoryFields()" style="display: none;">➕</span> <!-- أيقونة لإظهار/إخفاء حقول الإضافة -->
                        </div>
                    </div>
                    <p>التفاصيل ...</p>
                    <label for="itemName">اسم الفئة:</label>
                    <input type="text" id="itemName" required><br>
                    <label for="itemParent">القسم التابع لها:</label>
                    <br>
                    <select id="itemParent">
                        <option value="0"> </option>
                    </select>
                    <br><br>
                    <button onclick="addNewSubCategory()">إضافة</button>
                </form>
            </div>
            <div id="section3" class="section">
                <form>
                    <div class="section-header">
                        <h2>أضف منتج جديد</h2>
                        <div class="section-actions">
                            <span class="save-icon" onclick="saveChanges('section3')" style="display: none;">💾</span>
                        </div>
                    </div>
                    <p>تفاصيل المنتج...</p>
                    <label for="proudectName">اسم المنتج:</label>
                    <input type="text" id="proudectName"><br>
                    <label for="itemDescription">الوصف:</label>
                    <input type="text" id="itemDescription"><br>
                    <label for="itemParentsub">الفئة التابع لها:</label>
                    <br>
                    <select id="itemParentsub">
                        <option value="0"> </option>

                    </select>
                    <br><br>
                    <button onclick="addNewItem()">إضافة منتج جديد</button>
                </form>
            </div>
            <div id="section4" class="section">
                <form  action="/api/Attribute/addDetails" method="POST" enctype="multipart/form-data">
                    <fieldset >
                        <legend>تفاصيل المنتج</legend>

                        <label for="mainCategory">الفئة الأساسية:</label>
                        <select id="mainCategory" name="mainCategory">
                            <option value="0"> </option>

                        </select>
                        <br>
                        <br>
                        <label for="subCategory">الفئة الفرعية:</label>
                        <select id="subCategory" name="subCategory">
                            <option value="0"> </option>

                        </select>
                        <br>
                        <br>
                        <label for="productId">اختر المنتج:</label>
                        <select id="productId" name="productId">
                            <option value="0"> </option>

                        </select>
                        <br>
                        <br>

                        <label for="itemQuantity">الكمية:</label>
                        <input type="number" id="itemQuantity" min="1" value="1" name="Quantity" required>

                        <br>

                        <label for="itemPrice">السعر:</label>
                        <input type="number" id="itemPrice" min="1000" value="1000"  name="Price" required>

                        <br>
                    </fieldset>
                    <br>
                    <fieldset id="1" >
                        <legend>الخصائص</legend>
                        <label for="existing_property">اختر الخصائص  :</label>
                        <select id="existing_property" name="Name1" >
                            <option value="0"> </option>

                        </select>
                        <br>
                        <label for="property_value_dropdown" hidden></label>
                        <select id="property_value_dropdown" name="property_value_dropdown" hidden>
                        </select>
                        <label for="property_value">القيمة:</label>
                        <input type="text" id="property_value" name="Value1" placeholder="القيمة">
                        <br>
                        <button onclick="addRow()">أضف خاصية جديدة</button>
                        <br>
                        <br>
                        <div id="select-container" style="display: none;"></div>

                    </fieldset>
                    <br>
                    <fieldset>
                        <legend>الصورة أو الشعار</legend>

                        <div id="imageInputsContainer">
                            <label for="productImage1">صور المنتج :</label>
                            <input type="file" class="image-input" name="productImages[]" accept="image/*" required>
                        </div>

                        <span id="addImage" style="cursor: pointer; color: blue; left: 10px;">+</span>

                    </fieldset>
                    <br>
                    <button type="submit" id="submitButton" >حفظ</button>
                   
                </form>

            </div>
            <div id="section5" class="section">
                <h1>قائمة المنتجات</h1>
                <table>
                    <thead>
                        <tr>
                            <th>الرقم التسلسلي</th>
                            <th>اسم المنتج</th>
                            <th>الوصف</th>
                            <th>السعر</th>
                            <th>الكمية المتاحة</th>
                        </tr>
                    </thead>
                    <tbody id="productsTableBody">
                    </tbody>
                </table>
            </div>
            <div id="section6" class="section">
                <h2>محتوى المنتجات</h2>
                <p>تستطيع التعديل على المنتجات</p>
                <ul id="itemList">
                    <!-- Product items will be dynamically added here using JavaScript -->
                </ul>
            </div>
        </div>
    </main>

    <footer>
        <p dir="ltr">&copy; 2024 - جميع الحقوق محفوظة</p>
        |
        <a href="front_privacy_policy">سياسة الخصوصية</a>

        <a href="front_about">من نحن</a>
        |
        <div class="social-links">
            <strong>تواصل معنا:</strong>
            <a href="@(Url.Content("https://youtube.com/@-StationeryStore?si=XlmT8B-DREJrxxNw"))">
                <img src="~/Images/Youtube.png" alt="Youtube Icon">
            </a>

            <a href="https://www.facebook.com/profile.php?id=61558642717289&mibextid=ZbWKwL">
                <img src="~/Images/facebook-icon.png" alt="Facebook Icon">
            </a>

            <a href="https://web.whatsapp.com/">
                <img src="~/Images/phone-call.png" alt="Phone Icon">
            </a>

        </div>
    </footer>
    <script>
        const authToken = localStorage.getItem('authToken');

        document.getElementById('property_value').disabled = false;

        var imageCounter = 2; // بداية عداد الصور من 2

        document.getElementById('addImage').addEventListener('click', function () {
            var container = document.getElementById('imageInputsContainer');
            var newInput = document.createElement('input');
            newInput.type = 'file';
            newInput.className = 'image-input';
            newInput.name = 'productImages[]';
            newInput.accept = 'image/*';
            newInput.required = true;
            container.appendChild(document.createElement('br'));
            container.appendChild(newInput);

            // زيادة عداد الصور
            imageCounter++;
        });
        var addedRow = false; // متغير لتتبع ما إذا تمت إضافة الصف الإضافي

        function addRow() {
            if (!addedRow) {
                // Fetch attributes from the API
                fetch('/api/Attribute/getAllAttribute', {
                    headers: {
                        'Authorization': 'Bearer ' + authToken
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        // Create a new div to contain the new row
                        const newRow = document.createElement('div');

                        // Create the new select element for properties
                        const newPropertySelect = document.createElement('select');
                        newPropertySelect.setAttribute('id', 'new_property');
                        newPropertySelect.setAttribute('name', 'Name2');

                        // Create an option for the select element (you can add more options as needed)
                        const option = document.createElement('option');
                        option.textContent = 'خاصية جديدة';
                        newPropertySelect.appendChild(option);

                        // Iterate over each attribute and create an option element for it
                        data.forEach(attribute => {
                            const option = document.createElement('option');
                            option.value = attribute.name;
                            option.textContent = attribute.name;
                            newPropertySelect.appendChild(option);
                        });

                        // Append the new select element to the div
                        newRow.appendChild(newPropertySelect);

                        // Create the input field for the value
                        const propertyValueInput = document.createElement('input');
                        propertyValueInput.setAttribute('type', 'text');
                        propertyValueInput.setAttribute('name', 'Value2');
                        propertyValueInput.setAttribute('placeholder', 'القيمة');

                        // Append the input field to the div
                        newRow.appendChild(propertyValueInput);

                        // Get the fieldset with id "1"
                        const fieldset = document.getElementById('1');

                        // Append the new row to the fieldset
                        fieldset.appendChild(newRow);

                        addedRow = true; // تعيين المتغير إلى القيمة true للدلالة على إضافة الصف الإضافي
                    })
                    .catch(error => console.error('Error fetching attributes:', error));
            }
        }

        // Fetch attribute data and populate the select element
        fetch('/api/Attribute/getAllAttribute', {
            headers: {
                'Authorization': 'Bearer ' + authToken
            }
        })
            .then(response => response.json())
            .then(data => {
                const selectElement = document.getElementById('existing_property');
                data.forEach(attribute => {
                    const option = document.createElement('option');
                    option.value = attribute.name;
                    option.textContent = attribute.name;
                    selectElement.appendChild(option);
                });

                // Event listener for select element
                selectElement.addEventListener('change', function () {
                    const selectedOption = selectElement.options[selectElement.selectedIndex];
                    const selectedId = selectedOption.value;

                    // Fetch values from the API and populate the dropdown
                    fetch(`/api/Attribute/selectAttribute?id=${selectedId}`, {
                        headers: {
                            'Authorization': 'Bearer ' + authToken
                        }
                    })
                        .then(response => response.json())
                        .then(attributeData => {
                            console.log('Response data:', attributeData); // Log the response data for inspection

                            const propertyValueDropdown = document.getElementById('property_value_dropdown');
                            propertyValueDropdown.innerHTML = ''; // Clear the existing options

                            attributeData.productAttributes.forEach(productAttribute => {
                                const option = document.createElement('option');
                                option.value = productAttribute.value;
                                option.textContent = productAttribute.value;
                                propertyValueDropdown.appendChild(option);
                            });

                            // Enable the dropdown and disable the input field
                            // document.getElementById('property_value_dropdown').disabled = false;
                        })
                        .catch(error => console.error('Error fetching attribute values:', error));
                });
            })
            .catch(error => console.error('Error fetching attributes:', error));
        // Fetch attribute data and populate the select element
      

      


        function fetchCategories() {
            fetch('/api/Category', {
                headers: {
                    'Authorization': 'Bearer ' + authToken
                }
            })
                .then(response => response.json())
                .then(data => {
                    const mainCategorySelect = document.getElementById('mainCategory');
                    data.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category.id;
                        option.textContent = category.name;
                        mainCategorySelect.appendChild(option);
                    });
                    // Trigger change event to populate subcategories based on the selected main category
                    mainCategorySelect.dispatchEvent(new Event('change'));
                })
                .catch(error => console.error('Error fetching categories:', error));
        }

        // Function to fetch subcategories based on the selected main category
        function fetchSubcategories(categoryId) {
            fetch(`/api/Category/${categoryId}`, {
                headers: {
                    'Authorization': 'Bearer ' + authToken
                }
            })
                .then(response => response.json())
                .then(data => {
                    const subCategorySelect = document.getElementById('subCategory');
                    // Clear existing options
                    subCategorySelect.innerHTML = '';
                    data.subCategories.forEach(subCategory => {
                        const option = document.createElement('option');
                        option.value = subCategory.id;
                        option.textContent = subCategory.name;
                        subCategorySelect.appendChild(option);
                    });
                    // Trigger change event to fetch products based on the selected subcategory
                    subCategorySelect.dispatchEvent(new Event('change'));
                })
                .catch(error => console.error('Error fetching subcategories:', error));
        }

        // Function to fetch products based on the selected subcategory
        function fetchProducts(subcategoryId) {
            // Fetch products based on subcategoryId and populate the product select element
            // Implement this part according to your API endpoint and logic
        }

        // Function to fetch products based on the selected subcategory using subId
        function fetchProductsBySubId(subId) {
            fetch(`/api/Product/subId?subId=${subId}`, {
                headers: {
                    'Authorization': 'Bearer ' + authToken
                }
            })
                .then(response => response.json())
                .then(data => {
                    const selectElement = document.getElementById('productId');
                    // Clear existing options
                    selectElement.innerHTML = '';
                    data.forEach(product => {
                        // Assuming each product has only one productAttributeQuantity for simplicity
                        const productAttributeQuantity = product.productAttributeQuantities[0];
                        const option = document.createElement('option');
                        option.value = product.id; // Use the actual product id here
                        option.textContent = `${product.name}`; // Display product name
                        selectElement.appendChild(option);
                    });
                })
                .catch(error => console.error('Error fetching products with quantity:', error));
        }

        // Populate main categories when the page loads
        window.addEventListener('load', fetchCategories);

        // When the main category selection changes, fetch subcategories
        document.getElementById('mainCategory').addEventListener('change', function () {
            const categoryId = this.value;
            fetchSubcategories(categoryId);
        });

        // When the subcategory selection changes, fetch products using subId
        document.getElementById('subCategory').addEventListener('change', function () {
            const subId = this.value;
            fetchProductsBySubId(subId);
        });



        // استدعاء طلب API لجلب الفئات الفرعية
        fetch('/api/SubCategory', {
            headers: {
                'Authorization': 'Bearer ' + authToken
            }
        })
            .then(response => response.json())
            .then(data => {
                // عرض الفئات الفرعية كخيارات داخل عنصر select
                const selectElement = document.getElementById('subCategory');
                data.forEach(subCategory => {
                    const option = document.createElement('option');
                    option.value = subCategory.id;
                    option.textContent = subCategory.name;
                    selectElement.appendChild(option);
                });
            })
            .catch(error => console.error('Error fetching subcategories:', error));
        
        // تعريف متغير لتخزين رقم الفئة المحددة
        let selectedCategoryId = null;

        // استدعاء طلب API لجلب الفئات
        fetch('/api/Category', {
            headers: {
                'Authorization': 'Bearer ' + authToken
            }
        })
            .then(response => response.json())
            .then(data => {
                // عرض الفئات كخيارات داخل عنصر select
                const selectElement = document.getElementById('itemParent');
                data.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.textContent = category.name;
                    selectElement.appendChild(option);
                });
            })
            .catch(error => console.error('Error fetching categories:', error));

        // إضافة مستمع لحدث تغيير القيمة في عنصر select
        document.getElementById('itemParent').addEventListener('change', function () {
            // تحديث قيمة المتغير عند تغيير الفئة المحددة
            selectedCategoryId = this.value;
        });

        // دالة إضافة الفئة الفرعية
        function addNewSubCategory() {
            const itemName = document.getElementById('itemName').value;

            // التحقق مما إذا كانت الفئة المحددة غير فارغة
            if (selectedCategoryId === undefined) {
                alert('يرجى اختيار الفئة أولاً.');
                return;
            }

            // إنشاء كائن يحتوي على البيانات المدخلة
            const subCategoryData = {
                Name: itemName,
                CategoryId: selectedCategoryId
            };

            // إرسال طلب POST إلى واجهة البرمجة API
            fetch('/api/SubCategory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(subCategoryData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('فشلت عملية إضافة الفئة الفرعية');
                    }
                    // عرض رسالة نجاح للمستخدم
                    alert('تمت إضافة الفئة الفرعية بنجاح!');
                    // تفريغ محتوى حقول الإدخال بعد النجاح
                    document.getElementById('itemName').value = '';
                    document.getElementById('itemParent').selectedIndex = 0; // إعادة تحديد القيمة الافتراضية لعنصر الاختيار
                })
                .catch(error => {
                    console.error('خطأ:', error);
                    // عرض رسالة خطأ للمستخدم
                    alert('حدث خطأ أثناء إضافة الفئة الفرعية. يرجى المحاولة مرة أخرى لاحقًا.');
                });
        }
        // تعريف متغير لتخزين رقم الفئة الفرعية المحددة
        let selectedSubCategoryId = null;

        // استدعاء طلب API لجلب الفئات الفرعية
        fetch('/api/SubCategory', {
            headers: {
                'Authorization': 'Bearer ' + authToken
            }
        })
            .then(response => response.json())
            .then(data => {
                // عرض الفئات الفرعية كخيارات داخل عنصر select
                const selectElement = document.getElementById('itemParentsub');
                data.forEach(subCategory => {
                    const option = document.createElement('option');
                    option.value = subCategory.id;
                    option.textContent = subCategory.name;
                    selectElement.appendChild(option);
                });
            })
            .catch(error => console.error('Error fetching subcategories:', error));

        // استماع لحدث change في عنصر select للفئات الفرعية
        document.getElementById('itemParentsub').addEventListener('change', function () {
            selectedSubCategoryId = this.value; // تحديث قيمة المتغير عند تغيير القيمة المحددة في القائمة المنسدلة
        });

        // دالة إضافة منتج جديد
        function addNewItem() {
            const productName = document.getElementById('proudectName').value;
            const itemDescription = document.getElementById('itemDescription').value;
            const itemParentSub = document.getElementById('itemParentsub').value;

            const newItemData = {
                Name: productName,
                Description: itemDescription,
                SubCategoryId: itemParentSub
            };

            fetch('/api/Product', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + authToken
                   
                },
                body: JSON.stringify(newItemData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to add item');
                    }
                    return response.json();
                })
                .then(data => {
                    alert('تمت إضافة المنتج بنجاح!');
                    document.getElementById('proudectName').value = '';
                    document.getElementById('itemDescription').value = '';
                    document.getElementById('itemParentsub').selectedIndex = 0;
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('حدث خطأ أثناء إضافة المنتج. يرجى المحاولة مرة أخرى لاحقًا.');
                });
        }


       

        function populateDropdown(select, values) {
            // مسح الخيارات الحالية
            select.innerHTML = '';

            // إضافة خيارات جديدة من القائمة
            values.forEach(value => {
                const option = document.createElement('option');
                option.value = value;
                option.text = value;
                select.add(option);
            });
        }
      
        //products info
        function fetchProducts() {
            // قم بجلب بيانات المنتجات من خلال طلب HTTP
            fetch('/api/Product', {
                headers: {
                    'Authorization': 'Bearer ' + authToken
                }
            })
                .then(response => response.json())
                .then(products => {
                    // قم بتحديث جدول المنتجات مع البيانات الجديدة
                    updateProductTable(products);
                    displayProducts(products);
                })
                .catch(error => console.error('حدث خطأ أثناء جلب بيانات المنتجات:', error));
        }
        function updateProductTable(products) {
            const tableBody = document.getElementById('productsTableBody');
            // قم بمسح البيانات القديمة من جدول المنتجات
            tableBody.innerHTML = '';

            // قم بإضافة البيانات الجديدة إلى جدول المنتجات
            products.forEach(product => {
                const price = product.productAttributeQuantities.length > 0 ? product.productAttributeQuantities[0].price : 'N/A';
                const row = `
                            <tr>
                                <td>${product.id}</td>
                                <td>${product.name}</td>
                                <td>${product.description}</td>
                                <td>${price}</td>
                                <td>${product.productAttributeQuantities.length > 0 ? product.productAttributeQuantities[0].quantity : 'N/A'}</td>
                            </tr>
                        `;
                tableBody.innerHTML += row;
            });
        }

        // Display products in the itemList
        // Display products in the itemList with edit forms
        function displayProducts(products) {
            var itemList = document.getElementById('itemList');
            itemList.innerHTML = ''; // Clear existing items

            products.forEach(function (product) {
                var listItem = document.createElement('li');
                listItem.className = 'item';
                listItem.innerHTML = `
                                  <div class="product-container">
                                        <div class="product-info">
                                            <span>${product.name}</span>
                                        </div>
                                        <button class="editButton" data-product-id="${product.id}">تعديل</button>
                                        <div class="editForm" id="editForm${product.id}" style="display: none;">
                                            <label for="editedQuantity">الكمية:</label>
                                                    <input type="number" id="editedQuantity${product.id}" min="1" value="${product.productAttributeQuantities[0].quantity}">
                                            <label for="editedPrice">السعر:</label>
                                                    <input type="number" id="editedPrice${product.id}" min="0" value="${product.productAttributeQuantities[0].price}">
                                            <button onclick="saveChanges(${product.id})">حفظ التعديلات</button>
                                        </div>
                                    </div>
                                        `;
                itemList.appendChild(listItem);
            });
            // Add event listeners to edit buttons after they are created
            const editButtons = document.querySelectorAll('.editButton');
            editButtons.forEach(button => {
                button.addEventListener('click', showEditForm);
            });
        }
        // Function to show the edit form for a product
        function showEditForm(event) {
            const productId = event.target.dataset.productId;
            console.log(productId);
            const editForm = document.getElementById(`editForm${productId}`);
            editForm.style.display = 'block';
        }

        function saveChanges(productId) {
            const editedQuantity = document.getElementById(`editedQuantity${productId}`).value;
            const editedPrice = document.getElementById(`editedPrice${productId}`).value;

            const url = `/api/ProductAttributeQuantity/${productId}`;
            const data = {
                quantity: editedQuantity,
                price: editedPrice,
                productId: productId
            };

            fetch(url, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'accept': '*/*'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Updated successfully:', data);
                    // Optionally, you can add logic here to handle UI updates or feedback
                    alert('تم حفظ التعديلات');
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                    // Optionally, you can add error handling logic here
                    alert('حدث خطأ ما !');

                });
        }
      

        // Call fetchProducts to fetch and display products
        fetchProducts();


        // Function to dynamically generate an edit form for a specific product
        function editProduct(productId) {
            // Fetch product details based on productId (similar to fetching products)
            var product = getProductDetails(productId);

            // Replace the listItem content with an edit form
            var listItem = document.querySelector(`.item[data-product-id="${productId}"]`);
            listItem.innerHTML = `
                                                <img src="${product.image}"  alt="${product.description}">
                                                <span>${product.name}</span>
                                                <label for="itemQuantity">الكمية:</label>
                                                <input type="number" id="itemQuantity" min="1" value="${product.quantity}">
                                                <label for="itemPrice">السعر:</label>
                                                <input type="number" id="itemPrice" min="0" value="${product.price}">
                                                <button onclick="saveChangesByButton(this, '${product.id}')">حفظ التعديلات</button>
                                                <button onclick="cancelEdit('${product.id}')">إلغاء</button>
                                            `;
        }

        // Function to cancel the edit and revert to the display mode
        function cancelEdit(productId) {
            // Fetch product details based on productId (similar to fetching products)
            var product = getProductDetails(productId);

            // Replace the edit form with the original display content
            var listItem = document.querySelector(`.item[data-product-id="${productId}"]`);
            listItem.innerHTML = `
                                                <img src="${product.image}" alt="${product.description}">
                                                <span>${product.name}</span>
                                                <label for="itemQuantity">الكمية: ${product.quantity}</label>
                                                <label for="itemPrice">السعر: ${product.price}</label>
                                                <button onclick="saveChangesByButton(this, '${product.id}')">حفظ التعديلات</button>
                                                <button onclick="editProduct('${product.id}')">تعديل</button>
                                            `;
        }

        // Function to fetch product details based on productId
        function getProductDetails(productId) {
            // You need to implement this function to fetch product details from the server
            // based on the productId and return the product object
            // Example:
            // return { id: productId, name: "Product Name", quantity: 10, price: 50, image: "product.jpg" };
        }






        // Function to filter products based on the search input
        function filterProducts() {
            var searchTerm = document.getElementById('productSearch').value.toLowerCase();
            var filteredProducts = allProducts.filter(function (product) {
                return product.name.toLowerCase().includes(searchTerm);
            });

            displayProducts(filteredProducts);
        }

        // Load products when the page is loaded
        window.onload = function () {
            fetchProducts();
            document.getElementById('productSearch').addEventListener('input', filterProducts);
        };

        function deleteSelectedItem() {
            var itemList = document.getElementById('itemList');
            var selectedItems = itemList.getElementsByClassName('selected');

            if (selectedItems.length > 0) {
                // يمكنك هنا إرسال طلب إلى الخادم لحذف العناصر من قاعدة البيانات
                for (var i = 0; i < selectedItems.length; i++) {
                    var listItem = selectedItems[i];
                    listItem.parentNode.removeChild(listItem);
                }

                // إلغاء تحديد العناصر بعد الحذف
                clearSelection();
            } else {
                alert('يرجى تحديد عنصر لحذفه.');
            }
        }

        function toggleSelection(item) {
            // تبديل حالة التحديد عند النقر على العنصر
            item.classList.toggle('selected');
        }

        function clearSelection() {
            // إلغاء تحديد جميع العناصر
            var itemList = document.getElementById('itemList');
            var items = itemList.getElementsByClassName('item');

            for (var i = 0; i < items.length; i++) {
                items[i].classList.remove('selected');
            }
        }
        // function logout() {
        //     // حذف بيانات الدخول من Local Storage
        //     localStorage.removeItem('username');
        //     localStorage.removeItem('password');
        //     // إخفاء رابط تسجيل الخروج
        //     document.getElementById('logoutLink').style.display = 'none';
        //     alert('تم تسجيل الخروج بنجاح!');
        //     // توجيه المستخدم إلى الصفحة الرئيسية أو أي صفحة أخرى
        //     window.location.href = "front_home";
        // }

        function showSubcategories() {
            var categorySelect = document.getElementById("itemCategory");
            var subcategorySelect = document.getElementById("itemSubcategory");
            var addNewCategorySection = document.getElementById("addNewCategory");
            var addNewSubcategorySection = document.getElementById("addNewSubcategory");

            if (categorySelect.value === "newCategory") {
                addNewCategorySection.style.display = "block";
                addNewSubcategorySection.style.display = "none";
                document.getElementById("subcategories").style.display = "none";
            } else if (subcategorySelect.value === "newSubcategory") {
                addNewSubcategorySection.style.display = "block";
                addNewCategorySection.style.display = "none";
                document.getElementById("subcategories").style.display = "none";
            } else {
                addNewCategorySection.style.display = "none";
                addNewSubcategorySection.style.display = "none";
                document.getElementById("subcategories").style.display = "block";
            }
        }



        function showSection(sectionId) {
            // إخفاء جميع الأقسام
            var sections = document.querySelectorAll('.section');
            sections.forEach(function (section) {
                section.classList.remove('active-section');
            });

            // إظهار القسم المحدد
            var selectedSection = document.getElementById(sectionId);
            selectedSection.classList.add('active-section');

            // إظهار زر الحفظ بشكل تلقائي في القسم المحدد
            var saveIcon = selectedSection.querySelector('.save-icon');
            if (saveIcon) {
                saveIcon.style.display = 'inline';
            }

            // إخفاء زري التعديل والحذف في القسمين section2 و section3
            if (sectionId === 'section2' || sectionId === 'section3') {
                var editIcon = selectedSection.querySelector('.edit-icon');
                var deleteIcon = selectedSection.querySelector('.delete-icon');

                if (editIcon) {
                    editIcon.style.display = 'none';
                }
                if (deleteIcon) {
                    deleteIcon.style.display = 'none';
                }
            }
        }


        function editSection(sectionId) {
            // تمكين حقول التحرير
            var section = document.getElementById(sectionId);
            var inputs = section.querySelectorAll('input, select'); // أضف الـ select هنا لتشمل حقول التحرير
            inputs.forEach(function (input) {
                input.removeAttribute('disabled');
            });

            // إظهار زر الحفظ
            var saveIcon = section.querySelector('.save-icon');
            saveIcon.style.display = 'inline';
        }


        function deleteSection(sectionId) {
            // يمكنك إضافة رمز يقوم بحذف القسم أو تنفيذ الإجراء الخاص بك هنا
            alert('تم الحذف ');
        }
        
        window.onload = function () {
            // قم بإظهار القسم الأول الذي يحتوي على الصورة
            showSection('section1');
        };

        function toggleAddCategoryFields() {
            var section = document.getElementById('section2');
            var inputs = section.querySelectorAll('input');
            var select = section.querySelector('select');
            var saveIcon = section.querySelector('.save-icon');
            var addCategoryIcon = section.querySelector('.add-category-icon');

            // تبديل حالة حقول الإدخال وزر الحفظ وأيقونة الإضافة
            if (saveIcon.style.display === 'none') {
                // إظهار حقول الإدخال وزر الحفظ وأيقونة الإضافة
                inputs.forEach(function (input) {
                    input.removeAttribute('disabled');
                });
                select.removeAttribute('disabled');
                saveIcon.style.display = 'inline';
                addCategoryIcon.style.display = 'none';
                // تفريغ قيم حقول الإدخال
                inputs.forEach(function (input) {
                    input.value = '';
                });
            } else {
                // إخفاء حقول الإدخال وزر الحفظ وإظهار أيقونة الإضافة
                inputs.forEach(function (input) {
                    input.setAttribute('disabled', 'true');
                });
                select.setAttribute('disabled', 'true');
                saveIcon.style.display = 'none';
                addCategoryIcon.style.display = saveIcon.style.display !== 'none' ? 'inline' : 'none'; // تبديل عرض أيقونة الإضافة
            }
        }
        
        function logout() {
            // حذف الـ token من الجلسة
            localStorage.removeItem('authToken');

            // توجيه المستخدم إلى الصفحة الرئيسية أو أي صفحة أخرى
            window.location.href = "front_home";
        }
           



    </script>
</body>

</html>