@{
    ViewData["Title"] = "لوحة تحكم المدير";
}
<!DOCTYPE html>
<html lang="ar" dir="rtl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>لوحة تحكم المدير</title>
    <link rel="stylesheet" href="~/CSS/Styles.css">
    <link rel="icon" href="~/Images/ICO.png" type="image/png">
    <script src="~/Javascript/Functions.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<body>
    <a href="front_home">
        <img class="logo" src="~/Images/logo.png" alt="logo">
    </a>
    <div class="logout-icon">
        <a onclick="logout()" id="logoutLink">
            <img src="~/Images/log-out.png" alt="Logout">
            <span id="logout-text"> تسجيل الخروج</span>
        </a>
    </div>
    <main>
        <div id="sidebar">
            <a href="#section2" onclick="showSection('section2')">إضافة عاملين في المتجر</a>
            <a href="#section3" onclick="showSection('section3')">عرض المستخدمين</a>
            <a href="#section4" onclick="showSection('section4')">عرض جميع الطلبات</a>
            <a href="#section5" onclick="showSection('section5')">عرض جميع المنتجات</a>
            <a href="#section6" onclick="showSection('section6')">الشكاوي و الاستفسارات</a>
            <a href="#section7" onclick="showSection('section7')">تحليل البيانات</a>
            <a href="#section8" onclick="showSection('section8')">تعديل معلومات المتجر</a>
        </div>
        <div id="content">
            <div id="section1" class="section active-section">
                <h2>أهلاً بك</h2>
                <p>نحن فخورون بأن نقدم لكم متجرنا الإلكتروني للقرطاسية، حيث يديره فريق من المحترفين بقيادة المدير الخبير.</p>
                <p>يعمل المدير جاهدًا لضمان توفير تشكيلة واسعة من المنتجات عالية الجودة، ويسعى دائمًا لتلبية احتياجات عملائنا الكرام. بفضل خبرته الواسعة في مجال القرطاسية، يقوم بالإشراف على تحديث المخزون بانتظام وضمان جاهزية المنتجات.</p>
                <p>نحن نفتخر بتوفير تجربة تسوق سلسة ومرضية، ونشجعكم دائمًا على التواصل مع المدير لأي استفسارات أو اقتراحات. نتمنى لكم تجربة تسوق ممتعة!</p>
                <img class="first-img" src="~/Images/admin.jpg" alt="صورة تعبيرية عن عمل المدير في متجر الكتروني للقرطاسية">
            </div>
            <div id="section2" class="section">
                <h1>إضافة عاملين في المتجر</h1>
                <form>
                    <label for="managerName">الاسم:</label>
                    <input type="text" id="managerName" name="managerName" required>

                    <label for="managerPassword">كلمة المرور:</label>
                    <input type="password" id="managerPassword" name="managerPassword" required>

                    <label for="managerConfirmPassword">تأكيد كلمة المرور:</label>
                    <input type="password" id="managerConfirmPassword" name="managerConfirmPassword" required>

                    <label for="managerEmail">البريد الإلكتروني:</label>
                    <input type="email" id="managerEmail" name="managerEmail" required>

                    <label for="managerPhone">رقم الهاتف:</label>
                    <input type="tel" id="managerPhone" name="managerPhone" required>
                    <br><br>
                    <label for="managerType">نوع الموظف:</label>
                    <select id="managerType" name="managerType" required>
                        <option value="0"> </option>
                        <option value="manager">مدير المنتجات</option>
                        <option value="driver">السائق</option>
                    </select><br><br>
                    <button type="button" onclick="addUser()">إضافة</button>
                </form>
            </div>
            <div id="section3" class="section">
                <h1>قائمة المستخدمين</h1>
                <button id="fetchUsersButton">اعرض المستخدمين</button>
                <table>
                    <thead>
                        <tr>
                            <th>الرقم التسلسلي</th>
                            <th>الاسم</th>
                            <th>البريد الإلكتروني</th>
                            <th>الهاتف</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody">
                    </tbody>
                </table>
            </div>
            <div id="section4" class="section">
                <h1>قائمة الطلبات</h1>
                <button id="getAllOrdersButton">احصل على كل الطلبات</button>
                <table>
                    <thead>
                        <tr>
                            <th>رقم الطلب</th>
                            <th>تاريخ الطلبية</th>
                            <th>القيمة الإجمالية</th>
                            <th>حالة الطلبية</th>
                        </tr>
                    </thead>
                    <tbody id="requestsTableBody">
                    </tbody>
                </table>
            </div>
            <div id="section5" class="section">
                <h1>قائمة المنتجات</h1>
                <button onclick="fetchProducts()">جلب بيانات المنتجات</button>
                <table>
                    <thead>
                        <tr>
                            <th>الرقم التسلسلي</th>
                            <th>اسم المنتج</th>
                            <th>الوصف</th>
                            <th>السعر</th>
                            <th>الكمية المتاحة</th>
                        </tr>
                    </thead>
                    <tbody id="productsTableBody">
                    </tbody>
                </table>
            </div>
            <div id="section6" class="section">
                <h1>إدارة الشكاوي والاستفسارات</h1>
                <table>
                    <thead>
                        <tr>
                            <th>معرف الاستفسار</th>
                            <th>نوع الشكوى أو الاستفسار</th>
                            <th>تفاصيل الشكوى أو الاستفسار</th>
                            <th>حالة الشكوى</th>
                        </tr>
                    </thead>
                    <tbody id="complaintsTableBody">
                    </tbody>
                </table>
            </div>
            <div id="section7" class="section">
                <h1>تحليل البيانات</h1>
                <button id="analyzeButton">تحليل المبيعات</button>
                <br> <br>
                <div id="salesAnalysisResults"></div>
            </div>
            <div id="section8" class="section">
                <h1>معلومات المتجر</h1>
                <form>
                    <label for="storePhone">رقم هاتف المتجر:</label>
                    <input type="text" id="storePhone" name="storePhone"><br>

                    <label for="storeEmail">البريد الإلكتروني للمتجر:</label>
                    <input type="email" id="storeEmail" name="storeEmail"><br>

                    <label for="storeSocial">حساب السوشال ميديا للمتجر:</label>
                    <input type="text" id="storeSocial" name="storeSocial"><br><br>

                    <button type="button" onclick="save()">حفظ التغييرات</button>
                </form>
            </div>
        </div>
    </main>
    <footer>
        <p dir="ltr">&copy; 2024 - جميع الحقوق محفوظة</p>
        |
        <a href="front_privacy_policy">سياسة الخصوصية</a>
      
        <a href="front_about">من نحن</a>
        |
        <div class="social-links">
            <strong>تواصل معنا:</strong>
            <a href="@(Url.Content("https://youtube.com/@-StationeryStore?si=XlmT8B-DREJrxxNw"))">
                <img src="~/Images/Youtube.png" alt="Youtube Icon">
            </a>

            <a href="https://www.facebook.com/profile.php?id=61558642717289&mibextid=ZbWKwL">
                <img src="~/Images/facebook-icon.png" alt="Facebook Icon">
            </a>

            <a href="https://web.whatsapp.com/">
                <img src="~/Images/phone-call.png" alt="Phone Icon">
            </a>

        </div>
    </footer>
    <script>
        const authToken = localStorage.getItem('authToken');

        // Fetch data from the API endpoint
        function fetchComplaintsFromAPI() {
            fetch('/api/CustomerService/getComplains', {
                headers: {
                    'Authorization': 'Bearer ' + authToken
                }
            }) // Assuming the API endpoint is hosted on the same domain
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Once data is received, call a function to populate the HTML table with the data
                    populateComplaintsTable(data);
                })
                .catch(error => {
                    console.error('There was a problem fetching the complaints:', error);
                });
        }

        // Populate the HTML table with the fetched data
        function populateComplaintsTable(complaints) {
            const complaintsTableBody = document.getElementById('complaintsTableBody');

            complaints.forEach(complaint => {
                const row = document.createElement('tr');

                const customerNameCell = document.createElement('td');
                customerNameCell.textContent = complaint.id // Assigning ID to the cell
                row.appendChild(customerNameCell);

                const typeCell = document.createElement('td');
                typeCell.textContent = complaint.type ? "شكوى" : "استفسار عام"; // Set text based on boolean value
                row.appendChild(typeCell);

                const detailsCell = document.createElement('td');
                detailsCell.textContent = complaint.details;
                row.appendChild(detailsCell);

                const statusCell = document.createElement('td');
                // Create a dropdown menu with options based on adminResponse value
                const selectElement = document.createElement('select');
                selectElement.id = 'statusSelect_' + complaint.id; // Use complaint ID as part of the ID

                const option1 = document.createElement('option');
                option1.value = 'False';
                option1.textContent = 'قيد المراجعة';

                const option2 = document.createElement('option');
                option2.value = 'True';
                option2.textContent = 'تم التعامل معها';

                // Set the selected option based on the boolean value of adminResponse
                if (complaint.adminResponse) {
                    option2.selected = true;
                } else {
                    option1.selected = true;
                }

                selectElement.appendChild(option1);
                selectElement.appendChild(option2);

                statusCell.appendChild(selectElement);
                row.appendChild(statusCell);

                // Add event listener for change event on select element
                selectElement.addEventListener('change', function () {
                    // Check if the selected option is option2 ("resolved")
                    if (this.value === 'True') {
                        // Make an AJAX request to the server to update the AdminResponse value

                        const complaintId = complaint.id;

                        fetch(`/api/CustomerService/adminResponse?complaineId=${complaintId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({

                            })
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                               
                                // Optionally, display a success message or perform other actions
                                alert('تم التعامل مع الاستفسار بنجاح. !');
                                localStorage.setItem('alertMessage', 'تم التعامل مع الاستفسار بنجاح. شكراً لتواصلك معنا!');

                               
                            })
                            .catch(error => {
                                console.error('There was a problem updating the AdminResponse:', error);
                                // Optionally, display an error message to the user
                                alert('حدثت مشكلة أثناء تحديث الرد.');
                            });
                    }
                });


                complaintsTableBody.appendChild(row);
            });
        }

        // Call the function to fetch complaints when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            fetchComplaintsFromAPI();
        });

        // Function to handle the click event of the button
        function analyzeSalesData() {
            // Send an AJAX request to the backend endpoint
            fetch('/api/Order/getOrdersPercentage', {
                headers: {
                    'Authorization': 'Bearer ' + authToken
                }
            })
                .then(response => response.text()) // Assuming the response is text
                .then(data => {
                    // Update the sales analysis results div with the percentage
                    document.getElementById('salesAnalysisResults').innerHTML = data;
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        // Attach the analyzeSalesData function to the button click event
        document.getElementById('analyzeButton').addEventListener('click', analyzeSalesData);
        window.onload = function () {
            showSection('section1');
        };
        // Function to translate order status to Arabic
        function translateStatus(status) {
            switch (status) {
                case 'loading':
                    return 'جارٍ التحميل';
                case 'shipped':
                    return 'تم الشحن';
                case 'delivered':
                    return 'تم التوصيل';
                default:
                    return 'غير معروف';
            }
        }
        //getAllOrders
            document.getElementById('getAllOrdersButton').addEventListener('click', function () {
            fetch("/api/Order/getAllOrders", {
                headers: {
                    'Authorization': 'Bearer ' + authToken
                }
            })
                    .then(response => response.json())
                    .then(data => {
                        var tableBody = document.getElementById('requestsTableBody');
                        tableBody.innerHTML = ''; // لحذف أي بيانات قديمة قد تكون موجودة في الجدول

                        data.forEach(order => {
                            var row = "<tr>" +
                            "<td>" + order.id + "</td>" +
                                "<td>" + order.orderDate + "</td>" +
                                "<td>" + order.totalAmount + "</td>" +
                                "<td>" + translateStatus(order.orderStatus) + "</td>" +
                                "</tr>";
                            tableBody.innerHTML += row;
                        });
                    })
                    .catch(error => {
                        console.error("حدث خطأ أثناء جلب البيانات:", error);
                    });
            });
           //edit Info just get
        fetch('/api/ContactInformation/getStoreInfos', {
            headers: {
                'Authorization': 'Bearer ' + authToken
            }
        })
            .then(response => response.json())
            .then(data => {
                // تعبئة حقول النموذج بالقيم المسترجعة
                document.getElementById('storePhone').value = data[0].value;
                document.getElementById('storeEmail').value = data[1].value;
                document.getElementById('storeSocial').value = data[2].value;
            })
            .catch(error => console.error('حدث خطأ أثناء جلب بيانات معلومات الاتصال:', error));
        //add item manager and driver
        function addUser() {
            var userTypeElement = document.getElementById("managerType");
            var userTypeValue = userTypeElement.value;
            var userType;

            if (userTypeValue === "manager") {
                userType = "Item Manager";
            } else if (userTypeValue === "driver") {
                userType = "Driver";
            }

            var formData = {
                Username: document.getElementById("managerName").value,
                Password: document.getElementById("managerPassword").value,
                Email: document.getElementById("managerEmail").value,
                Phone: document.getElementById("managerPhone").value,
                UserType: userType // Assign converted user type
            };

            // Check if the selected user type is valid
            if (userType === "Item Manager" || userType === "Driver") {
                fetch('/api/User/add_user', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log(data); // Handle success response from backend
                        // Show success message
                        alert("تمت الإضافة بنجاح!");
                        // Clear input fields
                        document.getElementById("managerName").value = "";
                        document.getElementById("managerPassword").value = "";
                        document.getElementById("managerConfirmPassword").value = "";
                        document.getElementById("managerEmail").value = "";
                        document.getElementById("managerPhone").value = "";
                        document.getElementById("managerType").value = ""; // Reset dropdown selection
                    })
                    .catch(error => {
                        console.error('Error:', error); // Handle error
                        // Show error message
                        alert("حدث خطأ أثناء الإضافة !");
                    });
            } else {
                // If the selected user type is not valid
                alert("يرجى اختيار نوع الموظف الصحيح (مدير أو سائق)");
            }
        }
        // users info
        document.getElementById('fetchUsersButton').addEventListener('click', function () {
            // إجراء طلب لاسترجاع بيانات المستخدمين
            fetch('/api/User', {
                headers: {
                    'Authorization': 'Bearer ' + authToken
                }
            }) // قم بتغيير المسار إلى المسار الصحيح لنهاية الخدمة التي تسترجع بيانات المستخدمين
                .then(response => response.json())
                .then(data => {
                    // عرض بيانات المستخدمين في الجدول
                    const usersTableBody = document.getElementById('usersTableBody');

                    // تفريغ الجدول قبل إضافة البيانات الجديدة
                    usersTableBody.innerHTML = '';

                    data.forEach(user => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                                                <td>${user.id}</td>
                                                <td>${user.username}</td>
                                                <td>${user.email}</td>
                                                <td>${user.phone}</td>
                                            `;
                        usersTableBody.appendChild(row);
                    });
                })
                .catch(error => console.error('Error fetching users:', error));
        });
        //products info
        function fetchProducts() {
            // قم بجلب بيانات المنتجات من خلال طلب HTTP
            fetch('/api/Product', {
                headers: {
                    'Authorization': 'Bearer ' + authToken
                }
            })
                .then(response => response.json())
                .then(products => {
                    // قم بتحديث جدول المنتجات مع البيانات الجديدة
                    updateProductTable(products);
                })
                .catch(error => console.error('حدث خطأ أثناء جلب بيانات المنتجات:', error));
        }

        function updateProductTable(products) {
            // Clear the table body
            document.getElementById('productsTableBody').innerHTML = '';

            // Iterate over each product and append it to the table
            products.forEach(product => {
                const row = `
                    <tr>
                        <td>${product.id}</td>
                        <td>${product.name}</td>
                        <td>${product.description}</td>
                        <td>${product.productAttributeQuantities[0].price}</td>
                        <td>${product.productAttributeQuantities[0].quantity}</td>
                    </tr>
                `;
                document.getElementById('productsTableBody').innerHTML += row;
            });
        }


        // يمكنك استخدام JavaScript لتحديث حالة الطلبية وتنشيط الحدث المناسب
        const events = document.querySelectorAll('.event');

        function showSection(sectionId) {
            // إخفاء جميع الأقسام
            var sections = document.querySelectorAll('.section');
            sections.forEach(function (section) {
                section.classList.remove('active-section');
            });

            // إظهار القسم المحدد
            var selectedSection = document.getElementById(sectionId);
            selectedSection.classList.add('active-section');

            // إظهار زر الحفظ بشكل تلقائي في القسم المحدد
            var saveIcon = selectedSection.querySelector('.save-icon');
            if (saveIcon) {
                saveIcon.style.display = 'inline';
            }
        }
        function logout() {
            // حذف الـ token من الجلسة
            localStorage.removeItem('authToken');

            // توجيه المستخدم إلى الصفحة الرئيسية أو أي صفحة أخرى
            window.location.href = "front_home";
        }
       
       
       
    </script>

</body>

</html>
