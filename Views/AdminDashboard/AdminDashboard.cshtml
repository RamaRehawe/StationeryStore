@{
    ViewData["Title"] = "لوحة تحكم المدير";
}
<!DOCTYPE html>
<html lang="ar" dir="rtl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>لوحة تحكم المدير</title>
    <link rel="stylesheet" href="~/CSS/Styles.css">
    <link rel="icon" href="~/Images/ICO.png" type="image/png">
    <script src="~/Javascript/Functions.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<body>
    <a href="front_home">
        <img class="logo" src="~/Images/logo.png" alt="logo">
    </a>
    <div class="logout-icon">
        <a onclick="logout()" id="logoutLink">
            <img src="~/Images/log-out.png" alt="Logout">
            <span id="logout-text"> تسجيل الخروج</span>
        </a>
    </div>
    <main>
        <div id="sidebar">
            <a href="#section3" onclick="showSection('section3')">إضافة عاملين في المتجر</a>
            <a href="#section4" onclick="showSection('section4')">عرض المستخدمين</a>
            <a href="#section5" onclick="showSection('section5')">عرض جميع الطلبات</a>
            <a href="#section6" onclick="showSection('section6')">عرض جميع المنتجات</a>
            <a href="#section7" onclick="showSection('section7')">الشكاوي و الاستفسارات</a>
            <a href="#section8" onclick="showSection('section8')">تحليل البيانات</a>
            <a href="#section9" onclick="showSection('section9')">تعديل معلومات المتجر</a>
        </div>

        <div id="content">
            <div id="section1" class="section active-section">
                <h2>أهلاً بك</h2>
                <p>نحن فخورون بأن نقدم لكم متجرنا الإلكتروني للقرطاسية، حيث يديره فريق من المحترفين بقيادة المدير الخبير.</p>
                <p>يعمل المدير جاهدًا لضمان توفير تشكيلة واسعة من المنتجات عالية الجودة، ويسعى دائمًا لتلبية احتياجات عملائنا الكرام. بفضل خبرته الواسعة في مجال القرطاسية، يقوم بالإشراف على تحديث المخزون بانتظام وضمان جاهزية المنتجات.</p>
                <p>نحن نفتخر بتوفير تجربة تسوق سلسة ومرضية، ونشجعكم دائمًا على التواصل مع المدير لأي استفسارات أو اقتراحات. نتمنى لكم تجربة تسوق ممتعة!</p>
                <img class="first-img" src="~/Images/admin.jpg" alt="صورة تعبيرية عن عمل المدير في متجر الكتروني للقرطاسية">
            </div>
            <div id="section3" class="section">
                <h1>إضافة عاملين في المتجر</h1>
                <form>
                    <label for="managerName">الاسم:</label>
                    <input type="text" id="managerName" name="managerName" required>

                    <label for="managerPassword">كلمة المرور:</label>
                    <input type="password" id="managerPassword" name="managerPassword" required>

                    <label for="managerConfirmPassword">تأكيد كلمة المرور:</label>
                    <input type="password" id="managerConfirmPassword" name="managerConfirmPassword" required>

                    <label for="managerEmail">البريد الإلكتروني:</label>
                    <input type="email" id="managerEmail" name="managerEmail" required>

                    <label for="managerPhone">رقم الهاتف:</label>
                    <input type="tel" id="managerPhone" name="managerPhone" required>
                    <br><br>
                    <label for="managerType">نوع الموظف:</label>
                    <select id="managerType" name="managerType" required>
                        <option value="manager">مدير المنتجات</option>
                        <option value="driver">السائق</option>
                    </select><br><br>
                    <button type="button" onclick="addUser()">إضافة</button>
                </form>
            </div>

            <div id="section4" class="section">
                <h1>قائمة المستخدمين</h1>
                <button id="fetchUsersButton">اعرض المستخدمين</button>

                <!-- جدول لعرض بيانات المستخدمين -->
                <table>
                    <thead>
                        <tr>
                            <th>الرقم التسلسلي</th>
                            <th>الاسم</th>
                            <th>البريد الإلكتروني</th>
                            <th>الهاتف</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody">
                    </tbody>
                </table>
            </div>
            <div id="section5" class="section">
                <h1>قائمة الطلبات</h1>
                <!-- جدول لعرض البيانات -->
                <table>
                    <thead>
                        <tr>
                            <th>رقم الطلب</th>
                            <th>العنوان</th>
                            <th>التفاصيل</th>
                        </tr>
                    </thead>
                    <tbody id="requestsTableBody">
                        <!-- ستتم إضافة البيانات هنا باستخدام JavaScript -->
                    </tbody>
                </table>
            </div>

            <div id="section6" class="section">
                <h1>قائمة المنتجات</h1>

                <!-- زر لجلب بيانات المنتجات -->
                <button onclick="fetchProducts()">جلب بيانات المنتجات</button>

                <!-- جدول لعرض بيانات المنتجات -->
                <table>
                    <thead>
                        <tr>
                            <th>الرقم التسلسلي</th>
                            <th>اسم المنتج</th>
                            <th>الوصف</th>
                            <th>السعر</th>
                            <th>الكمية المتاحة</th>
                        </tr>
                    </thead>
                    <tbody id="productsTableBody">
                        <!-- ستتم إضافة بيانات المنتجات هنا باستخدام JavaScript -->
                    </tbody>
                </table>
            </div>
            <div id="section7" class="section">
                <h1>إدارة الشكاوي والاستفسارات</h1>

                <table>
                    <thead>
                        <tr>
                            <th>اسم العميل</th>
                            <th>نوع الشكوى أو الاستفسار</th>
                            <th>تفاصيل الشكوى أو الاستفسار</th>
                            <th>حالة الشكوى</th>
                        </tr>
                    </thead>
                    <tbody id="complaintsTableBody">
                        <!-- ستتم إضافة بيانات المستخدمين هنا باستخدام JavaScript -->
                    </tbody>
                </table>

            </div>
            <div id="section8" class="section">
                <h1>تحليل البيانات</h1>
                <button onclick="analyzeSalesData()">تحليل المبيعات</button>
                <br> <br>
                <div id="salesAnalysisResults"></div>
            </div>
            <div id="section9" class="section">
                <h1>معلومات المتجر</h1>
                <!-- نموذج لتعديل معلومات المتجر -->
                <form>
                    <!-- حقول الإدخال لمعلومات المتجر -->
                    <label for="storePhone">رقم هاتف المتجر:</label>
                    <input type="text" id="storePhone" name="storePhone"><br>

                    <label for="storeEmail">البريد الإلكتروني للمتجر:</label>
                    <input type="email" id="storeEmail" name="storeEmail"><br>

                    <label for="storeSocial">حساب السوشال ميديا للمتجر:</label>
                    <input type="text" id="storeSocial" name="storeSocial"><br><br>

                    <!-- زر الإرسال -->
                    <button type="button" onclick="saveChanges()">حفظ التغييرات</button>
                </form>
            </div>

        </div>
    </main>
    <footer>
        <p dir="ltr">&copy; 2024 - جميع الحقوق محفوظة</p>
        |
        <a href="front_privacy_policy">سياسة الخصوصية</a>
      
        <a href="front_about">من نحن</a>
        |
        <div class="social-links">
            <strong>تواصل معنا:</strong>
            <a href="@(Url.Content("https://youtube.com/@-StationeryStore?si=XlmT8B-DREJrxxNw"))">
                <img src="~/Images/Youtube.png" alt="Youtube Icon">
            </a>

            <a href="https://www.facebook.com/profile.php?id=61558642717289&mibextid=ZbWKwL">
                <img src="~/Images/facebook-icon.png" alt="Facebook Icon">
            </a>

            <a href="https://web.whatsapp.com/">
                <img src="~/Images/phone-call.png" alt="Phone Icon">
            </a>

        </div>
    </footer>
    <script>
       function populateStoreInformation() {
    fetch('/api/ContactInformation/getStoreInfos')
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to fetch store information');
            }
            return response.json();
        })
        .then(data => {
            const storePhoneInput = document.getElementById('storePhone');
            const storeEmailInput = document.getElementById('storeEmail');
            const storeSocialInput = document.getElementById('storeSocial');

            // تعيين قيم الحقول من البيانات المسترجعة
            storePhoneInput.value = data.find(info => info.Type === 'Phone').Value;
            storeEmailInput.value = data.find(info => info.Type === 'Email').Value;
            storeSocialInput.value = data.find(info => info.Type === 'Social Media').Value;
        })
        .catch(error => {
            console.error('Error fetching store information:', error);
        });
}

// استدعاء الوظيفة لتعبئة حقول النموذج عند تحميل الصفحة
populateStoreInformation();

        //     // Function to fetch store information and populate the form fields
        //     function fetchStoreInfo() {
        //     fetch('/api/ContactInformation/getStoreInfos')
        //             .then(response => response.json())
        //             .then(data => {
        //                 document.getElementById('storePhone').value = data.phone;
        //                 document.getElementById('storeEmail').value = data.email;
        //                 document.getElementById('storeSocial').value = data.socialMedia;
        //             })
        //             .catch(error => console.error('Error fetching store info:', error));
        //     }

        // // Function to send updated store information to the backend
        // function saveChanges() {
        //     var phone = document.getElementById('storePhone').value;
        //     var email = document.getElementById('storeEmail').value;
        //     var socialMedia = document.getElementById('storeSocial').value;

        //     var data = {
        //         value: phone,
        //         description: email,
        //         socialMedia: socialMedia
        //     };

        //     fetch('/api/ContactInformation/setContactInformation', {
        //         method: 'PUT',
        //         headers: {
        //             'Content-Type': 'application/json'
        //         },
        //         body: JSON.stringify(data)
        //     })
        //         .then(response => response.json())
        //         .then(updatedInfo => {
        //             console.log('Updated store information:', updatedInfo);
        //             // Optionally, perform any additional actions after successful update
        //         })
        //         .catch(error => console.error('Error updating store info:', error));
        // }

        // // Fetch store information when the page loads
        // window.onload = function () {
        //     fetchStoreInfo();
        // };
  

        // // الدالة لتحويل قيمة نوع المستخدم
        // function mapUserType(userType) {
        //     if (userType === "manager") {
        //         return "Item Manager";
        //     }
        //     else if (userType === "driver") {
        //         return "Driver";
        //     }
        //     // يمكنك إضافة تحويلات إضافية إذا لزم الأمر
        // }
        function addUser() {
            var userTypeElement = document.getElementById("managerType");
            var userTypeValue = userTypeElement.value;
            var userType;

            if (userTypeValue === "manager") {
                userType = "Item Manager";
            } else if (userTypeValue === "driver") {
                userType = "Driver";
            }

            var formData = {
                Username: document.getElementById("managerName").value,
                Password: document.getElementById("managerPassword").value,
                Email: document.getElementById("managerEmail").value,
                Phone: document.getElementById("managerPhone").value,
                UserType: userType // Assign converted user type
            };

            // Check if the selected user type is valid
            if (userType === "Item Manager" || userType === "Driver") {
                fetch('/api/User/add_user', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log(data); // Handle success response from backend
                        // Show success message
                        alert("تمت الإضافة بنجاح!");
                        // Clear input fields
                        document.getElementById("managerName").value = "";
                        document.getElementById("managerPassword").value = "";
                        document.getElementById("managerConfirmPassword").value = "";
                        document.getElementById("managerEmail").value = "";
                        document.getElementById("managerPhone").value = "";
                        document.getElementById("managerType").value = ""; // Reset dropdown selection
                    })
                    .catch(error => {
                        console.error('Error:', error); // Handle error
                        // Show error message
                        alert("حدث خطأ أثناء الإضافة !");
                    });
            } else {
                // If the selected user type is not valid
                alert("يرجى اختيار نوع الموظف الصحيح (مدير أو سائق)");
            }
        }



        // استجابة لنقرة زر العرض
        document.getElementById('fetchUsersButton').addEventListener('click', function () {
            // إجراء طلب لاسترجاع بيانات المستخدمين
            fetch('/api/User') // قم بتغيير المسار إلى المسار الصحيح لنهاية الخدمة التي تسترجع بيانات المستخدمين
                .then(response => response.json())
                .then(data => {
                    // عرض بيانات المستخدمين في الجدول
                    const usersTableBody = document.getElementById('usersTableBody');

                    // تفريغ الجدول قبل إضافة البيانات الجديدة
                    usersTableBody.innerHTML = '';

                    data.forEach(user => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                                                <td>${user.id}</td>
                                                <td>${user.username}</td>
                                                <td>${user.email}</td>
                                                <td>${user.phone}</td>
                                            `;
                        usersTableBody.appendChild(row);
                    });
                })
                .catch(error => console.error('Error fetching users:', error));
        });

        function fetchProducts() {
            // قم بجلب بيانات المنتجات من خلال طلب HTTP
            fetch('/api/ProductAttributeQuantity')
                .then(response => response.json())
                .then(products => {
                    // قم بتحديث جدول المنتجات مع البيانات الجديدة
                    updateProductTable(products);
                })
                .catch(error => console.error('حدث خطأ أثناء جلب بيانات المنتجات:', error));
        }

        function updateProductTable(products) {
            const tableBody = document.getElementById('productsTableBody');
            // قم بمسح البيانات القديمة من جدول المنتجات
            tableBody.innerHTML = '';

            // قم بإضافة البيانات الجديدة إلى جدول المنتجات
            products.forEach(product => {
                const row = `
                                    <tr>
                                               <td>${product.productId}</td>
                                            <td>${product.productName}</td>
                                            <td>${product.productDescription}</td>
                                                <td>${product.price}</td>
                                        <td>${product.quantity}</td>
                                    </tr>
                                `;
                tableBody.innerHTML += row;
            });
        }









        // يمكنك استخدام JavaScript لتحديث حالة الطلبية وتنشيط الحدث المناسب
        const events = document.querySelectorAll('.event');

        // قم بتحديد الحدث الحالي (حسب حالة الشحنة)
        const currentStatus = 'shipped'; // يمكنك تغيير هذه القيمة بحالة الشحنة الفعلية

        events.forEach(event => {
            const status = event.getAttribute('data-status');

            // قم بتحديث الحالة النشطة
            if (status === currentStatus) {
                event.classList.add('active');
            } else {
                event.classList.remove('active');
            }
        });
        function redirectToHomePage() {
            // استخدام window.location.href لتوجيه المتصفح إلى صفحة home.html
            window.location.href = 'home.html';
        }
        function showSection(sectionId) {
            // إخفاء جميع الأقسام
            var sections = document.querySelectorAll('.section');
            sections.forEach(function (section) {
                section.classList.remove('active-section');
            });

            // إظهار القسم المحدد
            var selectedSection = document.getElementById(sectionId);
            selectedSection.classList.add('active-section');

            // إظهار زر الحفظ بشكل تلقائي في القسم المحدد
            var saveIcon = selectedSection.querySelector('.save-icon');
            if (saveIcon) {
                saveIcon.style.display = 'inline';
            }
        }

        function editSection(sectionId) {
            console.log('تم تنفيذ editSection للقسم: ', sectionId);

            // تمكين حقول التحرير
            var section = document.getElementById(sectionId);
            var inputs = section.querySelectorAll('input, select');
            inputs.forEach(function (input) {
                input.removeAttribute('disabled');
            });

            // إظهار زر الحفظ
            var saveIcon = section.querySelector('.save-icon');
            saveIcon.style.display = 'inline';
        }

        function deleteSection(sectionId) {
            // يمكنك إضافة رمز يقوم بحذف القسم أو تنفيذ الإجراء الخاص بك هنا
            alert('حذف القسم: ' + sectionId);
        }

        function saveChanges(sectionId) {
            // حفظ التغييرات هنا (يمكنك إرسالها إلى الخادم أو تنفيذ الإجراء الخاص بك)
            alert('تم حفظ التغييرات: ' + sectionId);

            // تعطيل حقول التحرير
            var section = document.getElementById(sectionId);
            var inputs = section.querySelectorAll('input');
            inputs.forEach(function (input) {
                input.setAttribute('disabled', 'true');
            });

            // إخفاء زر الحفظ
            var saveIcon = section.querySelector('.save-icon');
            saveIcon.style.display = 'none';
        }

        function submitForm(event) {
            event.preventDefault();

            // يمكنك إضافة الكود اللازم هنا لمعالجة النموذج والرد على العميل
            // يمكن استخدام JavaScript أو تقديم طلب AJAX للتفاعل مع الخادم

            // في هذا المثال، سنقوم بعرض رسالة تأكيد ببساطة
            alert('تم استلام استفسارك، سنقوم بالرد في أقرب وقت ممكن. شكراً لتواصلك معنا!');
        }
        /*
        const productsData = [
            { id: 1, name: "منتج 1", price: 5000, quantity: 100 },
            { id: 2, name: "منتج 2", price: 2000, quantity: 50 },
            // ... يمكنك إضافة المزيد من المنتجات هنا
        ];
        const productsTableBody = document.getElementById("productsTableBody");

        productsData.forEach(product => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${product.id}</td>
                <td>${product.name}</td>
                <td>${product.price}</td>
                <td>${product.quantity}</td>
            `;
            productsTableBody.appendChild(row);
        });*/
        /*
        // مثال على بيانات المستخدمين (يمكن أن تكون جزءًا من قاعدة البيانات)
        const usersData = [
            { id: 1, name: "أحمد", email: "ahmed@example.com", phone: "123-456-789", address: "العنوان الأول" },
            { id: 2, name: "فاطمة", email: "fatima@example.com", phone: "987-654-321", address: "العنوان الثاني" },
            // ... يمكنك إضافة المزيد من المستخدمين هنا
        ];

        // استخدام JavaScript لإنشاء صفوف الجدول باستناء البيانات
        const tableBody = document.getElementById("usersTableBody");

        usersData.forEach(user => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${user.id}</td>
                <td>${user.name}</td>
                <td>${user.email}</td>
                <td>${user.phone}</td>
                <td>${user.address}</td> <!-- إضافة العنوان -->
            `;
            tableBody.appendChild(row);
        });
        */
        const requestsData = [
            { id: 1, title: "طلب 1", details: "تفاصيل طلب 1" },
            { id: 2, title: "طلب 2", details: "تفاصيل طلب 2" },
            // ... يمكنك إضافة المزيد من الطلبات هنا
        ];

        const tableBody1 = document.getElementById("requestsTableBody");

        requestsData.forEach(request => {
            const row = document.createElement("tr");
            row.innerHTML = `
                                    <td>${request.id}</td>
                                    <td>${request.title}</td>
                                    <td>${request.details}</td>
                                `;
            tableBody1.appendChild(row);
        });

        function calculateShippingCost() {
            var transportCost = parseFloat(document.getElementById('transportCost').value);
            var insuranceCost = parseFloat(document.getElementById('insuranceCost').value);
            var packingCost = parseFloat(document.getElementById('packingCost').value);
            var taxesFees = parseFloat(document.getElementById('taxesFees').value);
            var distance = parseFloat(document.getElementById('distance').value);

            var totalCost = transportCost + insuranceCost + packingCost + taxesFees + (distance * 0.1);
            document.getElementById('shippingCost').innerHTML = "تكلفة الشحن هي: " + totalCost.toFixed(2) + " ل.س";
        }

        /*   function addManager() {
               var managerName = document.getElementById('managerName').value;
               var managerEmail = document.getElementById('managerEmail').value;
               var managerPhone = document.getElementById('managerPhone').value;
               var managerAddress = document.getElementById('managerAddress').value;

               var managerData = {
                   name: managerName,
                   email: managerEmail,
                   phone: managerPhone,
                   address: managerAddress
               };

               console.log('تمت إضافة مدير المنتجات:', managerData);
               alert('تمت إضافة مدير المنتجات:\n\n' +
                   'الاسم: ' + managerData.name + '\n' +
                   'البريد الإلكتروني: ' + managerData.email + '\n' +
                   'رقم الهاتف: ' + managerData.phone + '\n' +
                   'العنوان: ' + managerData.address);
           }*/
        // function addDriver() {
        //     // Gather driver information from the form
        //     var driverName = document.getElementById("driverName").value;
        //     var driverPassword = document.getElementById("driverPassword").value;
        //     var driverEmail = document.getElementById("driverEmail").value;
        //     var driverPhone = document.getElementById("driverPhone").value;
        //     var driverLicense = document.getElementById("driverLicense").value;

        //     // Prepare data to be sent to the server for user registration
        //     var userData = {
        //         username: driverName,
        //         password: driverPassword,
        //         email: driverEmail,
        //         phone: driverPhone,
        //         userType: "Driver"
        //     };

        //     // Send a POST request to register the user
        //     fetch('/api/User/register_user', {
        //         method: 'POST',
        //         headers: {
        //             'Content-Type': 'application/json'
        //         },
        //         body: JSON.stringify(userData)
        //     })
        //         .then(response => {
        //             if (!response.ok) {
        //                 throw new Error('User registration failed');
        //             }
        //             return response.json();
        //         })
        //         .then(user => {
        //             var userId = user.id;

        //             // Prepare data to be sent to the server for adding the driver
        //             var driverData = {
        //                 driverLicense: driverLicense,
        //                 userId: userId
        //             };

        //             // Send a POST request to add the driver
        //             return fetch('/api/Driver/add_driver', {
        //                 method: 'POST',
        //                 headers: {
        //                     'Content-Type': 'application/json'
        //                 },
        //                 body: JSON.stringify(driverData)
        //             });
        //         })
        //         .then(response => {
        //             if (response.ok) {
        //                 // Driver addition successful
        //                 alert('تمت إضافة السائق بنجاح!');
        //             } else {
        //                 // Driver addition failed
        //                 throw new Error('Driver addition failed');
        //             }
        //         })
        //         .catch(error => {
        //             console.error('Error:', error);
        //             alert('حدث خطأ أثناء إضافة السائق. يرجى المحاولة مرة أخرى.');
        //         });
        // }

        // function addDriver() {
        //     // Gather driver information from the form
        //     var driverName = document.getElementById("driverName").value;
        //     var driverPassword = document.getElementById("driverPassword").value;
        //     var driverEmailElement = document.getElementById("driverEmail"); // Fetch the email input element
        //     var driverPhone = document.getElementById("driverPhone").value;
        //     var driverLicense = document.getElementById("driverLicense").value;

        //     // Get the value of the email input element
        //     var driverEmail = driverEmailElement.value;

        //     // Prepare data to be sent to the server for user registration
        //     var userData = {
        //         username: driverName,
        //         password: driverPassword,
        //         email: driverEmail, // Use the fetched email value
        //         phone: driverPhone,
        //         userType: "Driver" // Assuming the user being registered is a driver
        //     };

        //     // Send a POST request to register the user
        //     fetch('/api/User/register_user', {
        //         method: 'POST',
        //         headers: {
        //             'Content-Type': 'application/json'
        //         },
        //         body: JSON.stringify(userData)
        //     })
        //         .then(response => response.json())
        //         .then(user => {
        //             // Prepare data to be sent to the server for adding the driver
        //             var driverData = {
        //                 driverLicense: driverLicense,
        //                 userId: user.id // Use the ID of the registered user for the driver
        //             };

        //             // Send a POST request to add the driver
        //             fetch('/api/Driver/add_driver', {
        //                 method: 'POST',
        //                 headers: {
        //                     'Content-Type': 'application/json'
        //                 },
        //                 body: JSON.stringify(driverData)
        //             })
        //                 .then(response => {
        //                     if (response.ok) {
        //                         // Registration successful
        //                         alert('تمت إضافة السائق بنجاح!');
        //                     } else {
        //                         // Registration failed
        //                         alert('حدث خطأ أثناء إضافة السائق. يرجى المحاولة مرة أخرى.');
        //                     }
        //                 })
        //                 .catch(error => {
        //                     console.error('Error adding driver:', error);
        //                     alert('حدث خطأ أثناء إضافة السائق. يرجى المحاولة مرة أخرى.');
        //                 });
        //         })
        //         .catch(error => {
        //             console.error('Error registering user:', error);
        //             alert('حدث خطأ أثناء تسجيل المستخدم. يرجى المحاولة مرة أخرى.');
        //         });
        // }




        // function addDriver() {
        //     var driverName = document.getElementById('driverName').value;
        //     var driverLicense = document.getElementById('driverLicense').value;
        //     var driverPhone = document.getElementById('driverPhone').value;
        //     var driverAddress = document.getElementById('driverAddress').value;

        //     var driverData = {
        //         name: driverName,
        //         license: driverLicense,
        //         phone: driverPhone,
        //         address: driverAddress
        //     };

        //     console.log('تمت إضافة السائق:', driverData);
        //     alert('تمت إضافة السائق:\n\n' +
        //         'الاسم: ' + driverData.name + '\n' +
        //         'رخصة القيادة: ' + driverData.license + '\n' +
        //         'رقم الهاتف: ' + driverData.phone + '\n' +
        //         'العنوان: ' + driverData.address);
        // }
        const complaints = [
            { customerName: "اسم العميل", complaintType: "نوع الشكوى", complaintDetails: "تفاصيل الشكوى" },
            { customerName: "اسم العميل الآخر", complaintType: "نوع آخر", complaintDetails: "تفاصيل الشكوى الأخرى" },
            // قم بإضافة المزيد من الشكاوى حسب الحاجة
        ];
        function fillComplaintsTable() {
            var complaintsTableBody = document.getElementById("complaintsTableBody");
            complaintsTableBody.innerHTML = "";

            // Assuming complaints is defined somewhere
            for (var i = 0; i < complaints.length; i++) {
                var row = complaintsTableBody.insertRow();
                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                var cell3 = row.insertCell(2);
                var cell4 = row.insertCell(3);

                cell1.innerHTML = complaints[i].customerName;
                cell2.innerHTML = complaints[i].complaintType;
                cell3.innerHTML = complaints[i].complaintDetails;
                cell4.innerHTML = "<select id='statusSelect" + i + "'><option value='pending'>قيد المراجعة</option><option value='resolved'>تم التعامل معها</option></select>";
            }
        }

        function updateComplaintStatus(index) {
            var statusSelect = document.getElementById("statusSelect" + index);
            var selectedStatus = statusSelect.value;

            complaints[index].status = selectedStatus;
            fillComplaintsTable();
        }




        const salesData = [
            { month: "يناير", amount: 50000 },
            { month: "فبراير", amount: 75000 },
            { month: "مارس", amount: 100000 },
            // ... يمكنك إضافة المزيد من بيانات المبيعات
        ];

        function analyzeSalesData() {
            var totalSales = salesData.reduce(function (sum, sale) {
                return sum + sale.amount;
            }, 0);

            var salesRatioData = salesData.map(function (sale) {
                var ratio = (sale.amount / totalSales) * 100;
                return { month: sale.month, ratio: ratio.toFixed(2) + "%" };
            });

            var analysisReport = "نتائج التحليل:\n\n";
            salesRatioData.forEach(function (sale) {
                analysisReport += sale.month + ": " + sale.ratio + "\n";
            });

            document.getElementById("salesAnalysisResults").innerText = analysisReport;
        }

        const customerReviews = [
            { customerId: 1, rating: 4, feedback: "منتج رائع" },
            { customerId: 2, rating: 5, feedback: "خدمة سريعة وفعالة" },
            { customerId: 3, rating: 3, feedback: "يمكن تحسين الجودة" },
            // ... يمكنك إضافة المزيد من التقييمات
        ];

        /* function analyzeCustomerBehavior() {
             var totalCustomers = customerReviews.length;
             var averageRating = calculateAverageRating(customerReviews);

             var analysisReport = "نتائج التحليل:\n\n";
             analysisReport += "إجمالي عدد العملاء: " + totalCustomers + "\n";
             analysisReport += "متوسط التقييم: " + averageRating.toFixed(2) + "\n";

             document.getElementById("customerBehaviorAnalysis").innerText = analysisReport;
         }*/

        function calculateAverageRating(reviews) {
            var totalRating = reviews.reduce(function (sum, review) {
                return sum + review.rating;
            }, 0);

            return totalRating / reviews.length;
        }

        window.onload = function () {
            fillComplaintsTable();
            showSection('section1');
        };
    </script>

</body>

</html>
