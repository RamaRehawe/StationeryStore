@{
    ViewData["Title"] = "تفاصيل المنتج";
}
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>تفاصيل المنتج</title>
    <link rel="stylesheet" href="~/CSS/Styles.css">
    <link rel="stylesheet" href="~/CSS/Styles1.css">
    <link rel="icon" href="~/Images/ICO.png" type="image/png">
    <script src="~/Javascript/Functions.js"></script>
</head>
<body>
    <a href="front_home">
        <img class="logo" src="~/Images/logo.png" alt="logo">
    </a>
    <main>

        <div class="product-details" id="product-table">
            <h2></h2>
            <p></p>
            <div class="product-images" id="thumbnail-container">
            </div>
            <img  alt="Main Product Image" class="main-product-image" id="main-product-image">

            <div class="product-details">
                <table>
                    <tr>
                        <th>الخاصية</th>
                        <th>القيمة</th>
                    </tr>
                    <tr>
                        <td>
                            <select id="attribute-name" name="Name1">
                                <option value="">اختر الخاصية</option>
                               
                            </select>
                        </td>
                        <td>
                            <select id="attribute-name" name="Value1">
                                <option value="">اختر القيمة</option>
                            </select>
                        </td>
                    </tr>    
                   
                </table>
                <button onclick="addRow()">أضف خاصية جديدة</button>

            </div>

            <p id="price" class="price"></p>

            <div class="delivery-info" id="deliveryInfo">
                <!-- سيتم تحديث معلومات التسليم هنا -->
            </div>
            <br>
            <a href="#" id="showShippingLink">عرض تفاصيل الشحن</a>
            <div class="modal" id="shippingModal">
                <div class="modal-content">
                    <span class="close" id="closeShippingModalBtn">&times;</span>
                    <div class="shipping-details" id="shippingDetails">
                        <!-- سيتم تحديث تفاصيل الشحن هنا -->
                    </div>
                </div>
            </div>

            <div class="quantity" id="quantityContainer">
                <p>متوفر في المخزن</p>
                <label class="quantity-label">الكمية :</label>
                <select class="quantity-select" id="quantitySelect" onchange="updateQuantityInput()">
                   
                </select>
            </div>

            <div class="actions">
                <button class="add-to-cart" onclick="addToCart()">إضافة إلى السلة</button>
            </div>
            <br>
            <div id="addMessage" style="display: none; color: green;">
                تمت الإضافة بنجاح!
            </div>

            <div class="rating-form" id="ratingForm" style="display: none;">
                <h3>تقييم المنتج</h3>
                <div class="rating-stars">
                    <span onclick="rateProduct(1)">&#9733;</span>
                    <span onclick="rateProduct(2)">&#9733;</span>
                    <span onclick="rateProduct(3)">&#9733;</span>
                    <span onclick="rateProduct(4)">&#9733;</span>
                    <span onclick="rateProduct(5)">&#9733;</span>
                </div>
                <button onclick="submitRating()">تقييم</button>
                <br>
                <br>
                <button onclick="submitReview()">أضف تعليقًا</button>

                <textarea id="user-comment" placeholder="أضف تعليقًا..."></textarea>

            </div>

            <!-- عرض التقييمات -->
            <div class="product-ratings" id="ratingsDisplay">
                <h3>تقييمات المنتج</h3>
                <div class="user-rating">
                    <div class="rating-stars">
                        <span>&#9733;</span>
                        <span>&#9733;</span>
                        <span>&#9733;</span>
                        <span>&#9733;</span>
                        <span>&#9733;</span>
                    </div>
                    <p>المستخدم: تعليق رائع جدًا على المنتج يظهر هنا.</p>
                </div>
                <!-- يمكنك إضافة المزيد من التقييمات هنا -->
            </div>
        </div>
    </main>
    <footer>
        <p dir="ltr">&copy; 2024 - جميع الحقوق محفوظة</p>
        |
        <a href="front_privacy_policy">سياسة الخصوصية</a>
     
        <a href="front_about">من نحن</a>
        |
        <div class="social-links">
            <strong>تواصل معنا:</strong>
            <a href="@(Url.Content("https://youtube.com/@-StationeryStore?si=XlmT8B-DREJrxxNw"))">
                <img src="~/Images/Youtube.png" alt="Youtube Icon">
            </a>

            <a href="https://www.facebook.com/profile.php?id=61558642717289&mibextid=ZbWKwL">
                <img src="~/Images/facebook-icon.png" alt="Facebook Icon">
            </a>

            <a href="https://web.whatsapp.com/">
                <img src="~/Images/phone-call.png" alt="Phone Icon">
            </a>

        </div>
    </footer>

    <script>
        

      

        function submitReview() {
            var userComment = document.getElementById('user-comment').value;
            var selectedRating = getSelectedRating(); // Get the selected rating

            // Prepare review data
            const reviewData = {
                text: userComment,
                productId: productId, // Replace productId with the actual product ID
                rating: selectedRating
            };

            fetch('/api/Review', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + authToken // Assuming authToken is defined somewhere in your code
                },
                body: JSON.stringify(reviewData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to submit review');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Review submitted successfully:', data);
                    // Optionally, update UI or perform additional actions
                    // For example, you may want to refresh the page or display a success message
                })
                .catch(error => {
                    console.error('Error submitting review:', error);
                    // Handle error and display message to user
                });
        }

        // Function to get the selected rating
        function getSelectedRating() {
            var ratingStars = document.querySelectorAll('.rating-form .rating-stars span');
            for (var i = 0; i < ratingStars.length; i++) {
                if (ratingStars[i].classList.contains('active')) {
                    return i + 1; // Ratings are 1-based
                }
            }
            return 0; // Return 0 if no rating is selected
        }

        // Function to rate the product
        function rateProduct(stars) {
            // Update UI to reflect the selected rating
            var ratingStars = document.querySelectorAll('.rating-form .rating-stars span');
            ratingStars.forEach(function (star, index) {
                if (index < stars) {
                    star.classList.add('active');
                } else {
                    star.classList.remove('active');
                }
            });

            // Store the selected rating for submission
            selectedRating = stars;
        }

        // Function to submit the rating
        function submitRating() {
            var userComment = document.getElementById('user-comment').value;

            // Prepare rating data
            const rateData = {
                rating: selectedRating,
                comment: userComment
            };

            fetch('/api/Rate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(rateData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to submit rating');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Rating submitted successfully:', data);
                    // Update UI or perform additional actions if needed
                    updateRatingsDisplay(userComment, selectedRating); // Update ratings display after successful submission
                })
                .catch(error => {
                    console.error('Error submitting rating:', error);
                    // Handle error and display message to user
                });
        }

        // Function to update ratings display
        function updateRatingsDisplay(comment, stars) {
            // Update UI to display the new rating
            var ratingsDisplay = document.getElementById('ratingsDisplay');
            var newRating = document.createElement('div');
            newRating.className = 'user-rating';
            newRating.innerHTML = '<div class="rating-stars">' + getStarsHtml(stars) + '</div><p>المستخدم: ' + comment + '</p>';
            ratingsDisplay.appendChild(newRating);
        }

        // Function to generate HTML for stars
        function getStarsHtml(stars) {
            var starsHtml = '';
            for (var i = 0; i < stars; i++) {
                starsHtml += '&#9733;';
            }
            return starsHtml;
        }
       
        // Function to fetch reviews for a product
        function fetchReviews(productId) {
            fetch(`/api/Reviews/${productId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch reviews');
                    }
                    return response.json();
                })
                .then(reviews => {
                    // Once reviews are fetched successfully, update the UI
                    updateReviewsDisplay(reviews);
                })
                .catch(error => {
                    console.error('Error fetching reviews:', error);
                    // Handle error and display message to user
                });
        }

        // Function to update the HTML display with fetched reviews
        function updateReviewsDisplay(reviews) {
            // Get the ratings display container
            var ratingsDisplay = document.getElementById('ratingsDisplay');

            // Clear any existing reviews
            ratingsDisplay.innerHTML = '';

            // Loop through each review and add it to the display
            reviews.forEach(review => {
                // Create elements for the review
                var userRatingDiv = document.createElement('div');
                userRatingDiv.className = 'user-rating';

                var ratingStarsDiv = document.createElement('div');
                ratingStarsDiv.className = 'rating-stars';

                // Add stars based on the review rating
                for (var i = 0; i < review.rating; i++) {
                    var starSpan = document.createElement('span');
                    starSpan.innerHTML = '&#9733;';
                    ratingStarsDiv.appendChild(starSpan);
                }

                var userCommentP = document.createElement('p');
                userCommentP.textContent = 'المستخدم: ' + review.text;

                // Append rating stars and user comment to the user rating div
                userRatingDiv.appendChild(ratingStarsDiv);
                userRatingDiv.appendChild(userCommentP);

                // Append user rating div to the ratings display container
                ratingsDisplay.appendChild(userRatingDiv);
            });
        }

        // // Call fetchReviews function to fetch and display reviews for a specific product
        // fetchReviews(productId); // Replace productId with the actual product ID

        // Function to fetch rating counts for a specific product ID
        function fetchRatingCounts(productId) {
            fetch(`/api/Rate/${productId}/count`, {
                method: 'GET',
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch rating counts');
                    }
                    return response.json();
                })
                .then(ratingCounts => {
                    console.log('Rating counts:', ratingCounts);
                    // Update UI to display rating counts
                    displayRatingCounts(ratingCounts);
                })
                .catch(error => {
                    console.error('Error fetching rating counts:', error);
                    // Handle error and display message to user
                });
        }

        // Function to update UI with rating counts
        function displayRatingCounts(ratingCounts) {
            // Assuming you have an element in your UI to display the rating counts
            var ratingCountsElement = document.getElementById('ratingCountsDisplay');

            // Clear existing content
            ratingCountsElement.innerHTML = '';

            // Loop through each rating count and display it
            for (var rating in ratingCounts) {
                var count = ratingCounts[rating];
                var ratingCountElement = document.createElement('div');
                ratingCountElement.innerHTML = `<p>${rating} نجوم: ${count} تقييم</p>`;
                ratingCountsElement.appendChild(ratingCountElement);
            }
        }

        // استخراج query string من عنوان الصفحة الحالي
        const queryString = window.location.search;

        // إنشاء كائن URLSearchParams للعمل مع query string
        const urlParams = new URLSearchParams(queryString);

        // استخراج قيمة المعلمة id من query string
        const productId = urlParams.get('id');

        // الآن لديك قيمة productId التي تم تمريرها من الصفحة الأولى
        console.log(productId); // يجب عرض قيمة id هنا

        const authToken = localStorage.getItem('authToken');
        const userId = localStorage.getItem('userId'); // Assuming you store the user ID in localStorage

        var addedRow = false; // متغير لتتبع ما إذا تمت إضافة الصف الإضافي
        function addRow() {
            fetch(`https://localhost:7214/api/Product/productId?productId=${productId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('حدث خطأ في جلب البيانات: ' + response.status);
                    }
                    return response.json(); // تحويل البيانات المستردة إلى كائن JSON
                })
                .then(data => {
                    if (!addedRow) {
                        var table = document.getElementById("product-table");
                        var newRow = table.getElementsByTagName('tbody')[0].insertRow(); // الحصول على الصف الجديد من الجدول
                        var cell1 = newRow.insertCell(0); // إضافة خلية للصف الجديد
                        var cell2 = newRow.insertCell(1); // إضافة خلية للصف الجديد

                        // تعبئة القوائم المنسدلة بالبيانات المستردة
                        cell1.innerHTML = `
                            <select id="attribute-name" name="Name2">
                                <option value="">اختر الخاصية</option>
                                ${data.productAttributeQuantities.map(attr => `<option value="${attr.name2}">${attr.name2}</option>`).join('')}
                            </select>
                        `;

                        cell2.innerHTML = `
                            <select id="attribute-value" name="Value2">
                                <option value="">اختر القيمة</option>
                                ${data.productAttributeQuantities.map(attr => `<option value="${attr.value2}">${attr.value2}</option>`).join('')}
                            </select>
                        `;

                        addedRow = true; // تعيين المتغير إلى القيمة true للدلالة على إضافة الصف الإضافي
                    }

                })
                .catch(error => {
                    console.error('حدث خطأ: ', error);
                });
        }
        fetch(`https://localhost:7214/api/Product/productId?productId=${productId}`)
            .then(response => response.json())
            .then(productData => {
                // استخدام بيانات المنتج لتحديث عناصر الصفحة HTML
                document.getElementById('product-table').innerHTML = `
                    <h2>${productData.name}</h2>
                    <p>${productData.description}</p>
                             <div class="product-images" id="thumbnail-container">
                    </div>
                    <img  alt="Main Product Image" class="main-product-image" id="main-product-image">
                    <!-- إضافة بيانات المنتج الأخرى هنا -->
                    <table id="product-table">
                        <tr>
                            <th>الخاصية</th>
                            <th>القيمة</th>
                        </tr>
                        <tr>
                            <td>
                                <select id="attribute-name" name="Name1">
                                    <option value="">اختر الخاصية</option>
                                    ${productData.productAttributeQuantities.map(attr => `<option value="${attr.name1}">${attr.name1}</option>`).join('')}
                                </select>
                            </td>
                            <td>
                                <select id="attribute-value" name="Value1">
                                    <option value="">اختر القيمة</option>
                                    ${productData.productAttributeQuantities.map(attr => `<option value="${attr.value1}">${attr.value1}</option>`).join('')}
                                </select>
                            </td>
                        </tr>
                    </table>
                    <button onclick="addRow()">أضف خاصية جديدة</button> <!-- زر "أضف خاصية جديدة" -->
                    <div id="new-property"></div> <!-- ستتم إضافة الصفات الجديدة هنا -->
                    <!-- يمكنك إضافة المزيد من الخصائص هنا -->
                    <p id="price" class="price">السعر: ${productData.productAttributeQuantities[0].price} ل.س</p>
                             <div class="delivery-info" id="deliveryInfo">
                        <!-- سيتم تحديث معلومات التسليم هنا -->
                    </div>
                    <br>

                    <a href="#" id="showShippingLink" onclick="showShippingModal()">عرض تفاصيل الشحن</a>
                    <div class="modal" id="shippingModal">
                        <div class="modal-content">
                            <span class="close" id="closeShippingModalBtn" onclick="closeShippingModal()">&times;</span>
                            <div class="shipping-details" id="shippingDetails">
                                <!-- سيتم تحديث تفاصيل الشحن هنا -->
                            </div>
                        </div>
                    </div>

                            <div class="quantity" id="quantityContainer">
            <p>متوفر في المخزن</p>
            <label class="quantity-label">الكمية :</label>
                    <input class="quantity-input" id="quantityInput" type="number" placeholder="أدخل الكمية" min="1" onchange="updateQuantityInput(productData)">
        </div>

                            
                            <div class="actions">
        <button class="add-to-cart" onclick="addToCart()">إضافة إلى السلة</button>
                    </div>
                    <br>
                    <div id="addMessage" style="display: none; color: green;">
                        تمت الإضافة بنجاح!
                    </div>
                                       <div class="rating-form" id="ratingForm" style="display: none;">
                        <h3>تقييم المنتج</h3>
                        <div class="rating-stars">
                            <span onclick="rateProduct(1)">&#9733;</span>
                            <span onclick="rateProduct(2)">&#9733;</span>
                            <span onclick="rateProduct(3)">&#9733;</span>
                            <span onclick="rateProduct(4)">&#9733;</span>
                            <span onclick="rateProduct(5)">&#9733;</span>
                        </div>
                        <button onclick="submitRating()">تقييم</button>
                        <br>
                        <br>
                        <button onclick="submitReview()">أضف تعليقًا</button>

                        <textarea id="user-comment" placeholder="أضف تعليقًا..."></textarea>

                    </div>

                    <!-- عرض التقييمات -->
                    <div class="product-ratings" id="ratingsDisplay">
                        <h3>تقييمات المنتج</h3>
                        <div class="user-rating">
                            <div class="rating-stars">
                                <span>&#9733;</span>
                                <span>&#9733;</span>
                                <span>&#9733;</span>
                                <span>&#9733;</span>
                                <span>&#9733;</span>
                            </div>
                            <p>المستخدم: تعليق رائع جدًا على المنتج يظهر هنا.</p>
                        </div>
                        <!-- يمكنك إضافة المزيد من التقييمات هنا -->
                    </div>
                `;
                // Display product images
                const thumbnailContainer = document.getElementById('thumbnail-container');
                const mainProductImage = document.getElementById('main-product-image');

                // Clear previous images
                thumbnailContainer.innerHTML = '';

                // Iterate through each product attribute quantity
                productData.productAttributeQuantities.forEach(attribute => {
                    // Iterate through each image attribute
                    attribute.imageAttributes.forEach(image => {
                        if (image && image.url) { // Check if image and url property exist
                            const imageElement = document.createElement('img');
                            imageElement.src = image.url;
                            thumbnailContainer.appendChild(imageElement);
                        }
                    });

                    // Set the main product image with the first image in the first product attribute quantity
                    if (attribute.imageAttributes.length > 0 && !mainProductImage.src) {
                        mainProductImage.src = attribute.imageAttributes[0].url;
                    }
                });


                // الآن يتم تعيين الزر والقوائم بنجاح، لذا يمكننا إظهارها
                document.getElementById('product-table').style.display = 'block';
                updateDeliveryInfo(productData);

                // استدعاء وظيفة تحديث تفاصيل الشحن بتمرير بيانات المنتج
                updateShippingDetails(productData);
                updateQuantityInput(productData);
                window.productData = productData;

            })
            .catch(error => console.error('حدث خطأ في جلب معلومات المنتج:', error));


        // في دالة لإضافة المنتج إلى سلة التسوق
        function addToCart() {
            // Get productData from window object
            var productData = window.productData;
            // Get selected attribute values
            var attributeName = document.getElementById("attribute-name").value;
            var attributeValue = document.getElementById("attribute-value").value;

            // Check if at least one attribute is selected
            if (attributeName || attributeValue) {
                // Find the corresponding product attribute quantity
                var selectedProductAttribute;
                if (attributeName && attributeValue) {
                    // If both attributes are selected, find the corresponding product attribute quantity
                    selectedProductAttribute = productData.productAttributeQuantities.find(attr => attr.name1 === attributeName && attr.value1 === attributeValue);
                } else if (attributeName) {
                    // If only attribute name is selected, find the product attribute quantity with the selected attribute name
                    selectedProductAttribute = productData.productAttributeQuantities.find(attr => attr.name1 === attributeName);
                } else if (attributeValue) {
                    // If only attribute value is selected, find the product attribute quantity with the selected attribute value
                    selectedProductAttribute = productData.productAttributeQuantities.find(attr => attr.value1 === attributeValue);
                }

                // Check if a valid attribute combination is selected
                if (selectedProductAttribute) {
                    // قم بفحص حالة تسجيل الدخول
                    var isLoggedIn = checkLoginStatus();

                    if (isLoggedIn) {
                        // استدعاء الدالة المحسنة لإضافة المنتج إلى سلة التسوق
                        addToCartWithDetails( selectedProductAttribute.id, selectedProductAttribute.quantity);
                    } else {
                        // لم يتم تسجيل الدخول، قم بتوجيه المستخدم إلى صفحة تسجيل الدخول
                        alert('يجب عليك تسجيل الدخول لإضافة المنتج إلى سلة التسوق.');
                        window.location.href = 'front_login'; // قم بتغيير 'login.html' إلى عنوان URL الصحيح لصفحة تسجيل الدخول
                    }
                } else {
                    // If no valid attribute combination is selected, show an error message
                    alert('يرجى اختيار مواصفات المنتج الصحيحة.');
                }
            } else {
                // If neither attribute is selected, show an error message
                alert('يرجى اختيار مواصفات المنتج.');
            }
        }




        function addToCartWithDetails( productAttributeQuantityId, quantity) {
            // Calculate the subPrice
            const subPrice = price * quantity;

            // Create the itemDto object
            const itemDto = {
                productAttributeQuantityId: productAttributeQuantityId,
                quantity: quantity,
                subPrice: subPrice
            };

            // Create the data object to send in the request body
            const data = {
                itemDto: itemDto
            };

            // Send an HTTP POST request to the server
            fetch('/api/Cart/addItem', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + authToken
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(errorMsg => Promise.reject(new Error(errorMsg)));
                    }
                    return response.text();
                })
                .then(result => {
                    alert(result); // Show success message to the user
                    showAddMessage();
                    // Optionally, update UI or perform additional actions
                    window.location.href = 'front_cart';
                })
                .catch(error => {
                    alert(error.message); // Show error message to the user
                    console.error('Error adding item to cart:', error);
                });
        }

        // دالة لتحديث معلومات التوصيل
        function updateDeliveryInfo(productData) {
            var deliveryInfo = document.getElementById("deliveryInfo");
            var deliveryDate = calculateDeliveryDate();

            // حساب الوقت المتبقي للطلب
            var currentTime = new Date();
            var cutoffTime = new Date(currentTime);
            cutoffTime.setHours(24, 0, 0, 0); // منتصف الليل

            var timeDiff = cutoffTime - currentTime;
            var hoursRemaining = Math.floor(timeDiff / (1000 * 60 * 60));
            var minutesRemaining = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));

            var deliveryText = `
                            <p>التوصيل ${formatDate(deliveryDate.standard)}. أطلب خلال ${hoursRemaining} ساعة و ${minutesRemaining} دقيقة</p>
                        `;

            deliveryInfo.innerHTML = deliveryText;
        }


        function updateQuantityInput(productData) {
            var quantityContainer = document.getElementById("quantityContainer");

            // Clear the container
            quantityContainer.innerHTML = '';

            // Create an input field for quantity
            var quantityInput = document.createElement("input");
            quantityInput.type = "number";
            quantityInput.id = "quantityInput";
            quantityInput.placeholder = "Enter quantity";
            quantityInput.min = 1;
            quantityInput.max = productData.productAttributeQuantities[0].quantity; // Set maximum quantity
            quantityInput.value = 1; // Set default value

            // Append the input field to the container
            quantityContainer.appendChild(quantityInput);

            // Add event listener to capture the selected quantity
            quantityInput.addEventListener('change', function (event) {
                var selectedQuantity = parseInt(event.target.value); // Convert value to integer
                console.log('Selected quantity:', selectedQuantity);
                // You can perform any action here based on the selected quantity
                // For example, update UI elements or perform calculations
            });
        }



        function updateShippingDetails(productData) {
            var shippingDetails = document.getElementById("shippingDetails");

            var price = productData.productAttributeQuantities[0].price;
            var standardShippingFee = 15000;

            var total = price + standardShippingFee;

            // تحديد رمز العملة
            var currencySymbol = "ل.س ";

            // تنسيق الأرقام وإزالة الفواصل
            var formattedPrice = price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            var formattedShippingFee = standardShippingFee.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            var formattedTotal = total.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            var detailsText = `
                <h2>تفاصيل الشحن والرسوم</h2>
                <hr>
                <p class="align-right">السعر: <span class="align-left">${formattedPrice} ${currencySymbol}</span></p>
                <p class="align-right">رسوم الشحن من متجر القرطاسية: <span class="align-left">${formattedShippingFee} ${currencySymbol}</span></p>
                <hr>
                <p class="align-right">الإجمالي: <span class="align-left">${formattedTotal} ${currencySymbol}</span></p>
                <p class="red-bold-centered">الترجيع مجاني</p>
            `;

            shippingDetails.innerHTML = detailsText;
        }


        document.addEventListener("DOMContentLoaded", function () {
            // Event listener for the "showShippingLink" element
            var showShippingLink = document.getElementById("showShippingLink");
            showShippingLink.addEventListener("click", function (event) {
                event.preventDefault(); // Prevent the default click action
                showShippingModal(); // Call the function to show the shipping modal
            });

            // Event listener for the "closeShippingModalBtn" element
            var closeShippingModalBtn = document.getElementById("closeShippingModalBtn");
            closeShippingModalBtn.addEventListener("click", function () {
                closeShippingModal(); // Call the function to close the shipping modal
            });
        });
       

        function changeMainImage(newSrc) {
            var mainImage = document.getElementById('main-product-image');
            mainImage.src = newSrc;
        }
        

        // قم بالوصول إلى العنصر select
        var quantitySelect = document.getElementById("quantitySelect");

       
        // function redirectToCheckout() {
        //     var checkoutPageURL = "front_checkout"; 
        //     window.location.href = checkoutPageURL;
        // }
        // متغير لتتبع حالة المنتج (في السلة أو في قائمة الرغبات)
        var isInCart = false;

        // قم بتعريف دالة لفحص حالة تسجيل الدخول
        function checkLoginStatus() {
            // قم بالتحقق مما إذا كان هناك رمز مميز مخزن في تخزين المتصفح المحلي
            const authToken = localStorage.getItem('authToken');

            // قم بتحقق من وجود الرمز المميز
            const isLoggedIn = authToken !== null;

            return isLoggedIn;
        }


        // دالة لعرض رسالة تمت الإضافة
        function showAddMessage() {
            var addMessage = document.getElementById('addMessage');
            addMessage.style.display = 'block';

            // يمكنك إضافة أي تحسينات إضافية هنا، مثل إخفاء الرسالة بعد فترة زمنية قصيرة
            setTimeout(function () {
                addMessage.style.display = 'none';
            }, 3000); // يختفي الرسالة بعد 3 ثواني (يمكنك تعديل هذه الفترة حسب الحاجة)
        }
       
            // دالة لحساب تاريخ التوصيل
            function calculateDeliveryDate() {
                var currentDate = new Date();
                var currentHour = currentDate.getHours();
                var deliveryDateStandard = new Date();
            

                // إذا كان الوقت الحالي أكبر من أو يساوي 12 مساءً، فالتوصيل سيكون في اليوم التالي
                if (currentHour >= 12) {
                    deliveryDateStandard.setDate(currentDate.getDate() + 1);
                   
                } else {
                    deliveryDateStandard.setDate(currentDate.getDate());
                   
                }

                // التوصيل العادي خلال 5 أيام
                deliveryDateStandard.setDate(deliveryDateStandard.getDate() + 5);

                // إضافة متغير currentHour إلى الكائن المرتجع
                return {
                    standard: deliveryDateStandard,
                    currentHour: currentHour,
                };
            }

            // دالة لتنسيق التاريخ إلى الصيغة "الجمعة، فبراير 23"
            function formatDate(date) {
                var options = { weekday: 'long', month: 'long', day: 'numeric' };
                return date.toLocaleDateString('ar-AR', options);
            }

            

        function showShippingModal() {
            var shippingModal = document.getElementById("shippingModal");
            shippingModal.style.display = "block";
            // updateShippingDetails(productData);
        }

        function closeShippingModal() {
            var shippingModal = document.getElementById("shippingModal");
            shippingModal.style.display = "none";
        }

       
       
    </script>

</body>
</html>
