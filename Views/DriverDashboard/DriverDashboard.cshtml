@{
    ViewData["Title"] = "لوحة التحكم السائق";
}
<!DOCTYPE html>
<html lang="ar" dir="rtl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>تأكيد التسليم</title>
    <link rel="stylesheet" href="~/CSS/Styles.css">
    <link rel="icon" href="~/Images/ICO.png" type="image/png">
    <script src="~/Javascript/Functions.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
</head>

<body>
    <a href="front_home">
        <img class="logo" src="~/Images/logo.png" alt="logo">
    </a>
    <div class="logout-icon">
        <a onclick="logout()" id="logoutLink">
            <img src="~/Images/log-out.png" alt="Logout">
            <span id="logout-text"> تسجيل الخروج</span>
        </a>
    </div>
    <main>

        <div class="driver-status" >
            <h2>حالة السائق</h2>
            <p class="instruction-text" id="driverText">تحديث حالتك يساعدنا على تحسين تجربتك. اجعل نفسك متاحًا عندما تكون جاهزًا لتسليم الشحنات.</p>

            <label class="switch">
                <input type="checkbox" id="statusToggle" onchange="updateDriverStatus()">
                <span class="slider"></span>
            </label>
            <p id="statusText">مشغول</p>
        </div>
        <div class="grid-container">
            <div class="shipments-section">

                <h2>الشحنات بحاجة للتسليم</h2>
                <p class="instruction-text" id="shipmentsText">شحنات تنتظر تسليمك! تحقق من القائمة وبدء تسليم الشحنات الخاصة بك.</p>

                <!-- جدول الشحنات بحاجة للتسليم -->
                <table>
                    <thead>
                        <tr>
                            <th>رقم </th>
                            <th>اسم العميل</th>
                            <th>رقم الهاتف</th>
                            <th>عنوان التسليم</th>
                            <th>الحالة</th>
                            <th>إجراءات</th>
                        </tr>
                    </thead>
                    <tbody id="pendingOrdersTableBody">
                       
                    </tbody>
                </table>
            </div>

            <div class="previous-orders-section">

                <h2>الطلبيات السابقة</h2>
                <p class="instruction-text" id="ordersText">استعرض الطلبيات السابقة واطلع على تاريخ تسليمك.</p>
                <table>
                    <thead>
                        <tr>
                            <th>رقم الطلبية</th>
                            <th>اسم العميل</th>
                            <th>رقم الهاتف</th>
                            <th>عنوان التسليم</th>
                            <th>الحالة</th>
                        </tr>
                    </thead>
                    <tbody id="previousOrders">
                        <!-- يمكنك استخدام بيانات من قاعدة البيانات هنا -->
                    </tbody>
                </table>
            </div>

            <div class="timeline-section">
                <h2>خط الزمني للشحنة</h2>
                <p class="instruction-text" id="timelineText" style="color: red;">ملاحظة هامة !! لا تقم بالضغط على زر تم التوصيل إلى حين تسليم الشحنة إلى العملاء.</p>

                <!-- أزرار التحميل والشحن والتوصيل -->
                <div id="timeline-container">
                    <button onclick="updateTimeline('loading')"><i class="fas fa-upload"></i> تم التحميل</button>
                    <div class="line"></div>
                    <button onclick="updateTimeline('shipped')"><i class="fas fa-ship"></i> تم الشحن</button>
                    <div class="line"></div>
                    <button onclick="updateTimeline('deliverd', 'تم التوصيل')"><i class="fas fa-truck"></i> تم التوصيل</button>
                </div>

                <!-- خط الزمني -->
                <ul id="timeline">
                    <li class="event-delivery" id="loadingEvent">تحميل الشحنة</li>
                    <li class="line"></li>
                    <li class="event-delivery" id="shippingEvent">شحن الشحنة</li>
                    <li class="line"></li>
                    <li class="event-delivery" id="deliveryEvent">توصيل الشحنة</li>
                </ul>
            </div>


            <div class="delivery-confirmation-section"
                <div class="deliveryConfirmationForm">


                    <h2>تأكيد التسليم</h2>
                    <p class="instruction-text" id="confirmationText">أكمل عملك بتأكيد تسليم الشحنات. قد تحتاج إلى إدخال تفاصيل تأكيد لضمان سلامة التسليم.</p>
                    <div class="radio-group">
                        <label for="delivered">حالة التسليم:</label>
                        <div class="delivered">
                            <input type="radio" id="delivered" name="deliveryStatus" value="delivered" onclick="toggleForms()" class="delivered">
                            <label for="delivered">تم التسليم</label>
                            <input type="radio" id="notDelivered" name="deliveryStatus" value="notDelivered" onclick="toggleForms()">
                            <label for="notDelivered">لم يتم التسليم</label>
                        </div>
                    </div>

                    <div id="deliveredForm" style="display: none;">
                        <label for="deliveryPerson">من قام بالتسليم؟</label>
                        <select id="deliveryPerson" name="deliveryPerson">
                            <option value="owner">لصاحبها</option>
                            <option value="neighbor">لأحد الجيران</option>
                        </select>
                        <!-- عرض اسم الشخص الذي قام بالتسليم في عنصر منفصل -->
                        <p id="receiverName"></p>
                    </div>

                    <div class="notDeliveredForm" id="notDeliveredForm" style="display:none;">
                        <label for="reason">سبب عدم التسليم:</label><br><br>
                        <textarea id="reason" name="reason" rows="4" required=""></textarea>
                    </div>

                    <p id="confirmationMessage"></p>
                    <button type="button" onclick="confirmDelivery()">تأكيد </button>
                </div>
            </div>
        </div>

    </main>
    <footer>
        <p dir="ltr">&copy; 2024 - جميع الحقوق محفوظة</p>
        |
        <a href="front_privacy_policy">سياسة الخصوصية</a>
       
        <a href="front_about">من نحن</a>
        |
        <div class="social-links">
            <strong>تواصل معنا:</strong>
            <a href="@(Url.Content("https://youtube.com/@-StationeryStore?si=XlmT8B-DREJrxxNw"))">
                <img src="~/Images/Youtube.png" alt="Youtube Icon">
            </a>

            <a href="https://www.facebook.com/profile.php?id=61558642717289&mibextid=ZbWKwL">
                <img src="~/Images/facebook-icon.png" alt="Facebook Icon">
            </a>

            <a href="https://web.whatsapp.com/">
                <img src="~/Images/phone-call.png" alt="Phone Icon">
            </a>

        </div>
    </footer>
    <script>
        // Function to fetch pending orders from the server and populate the table
        function fetchAndPopulatePendingOrders() {
            fetch('/api/Driver/pendingOrders', {
                headers: {
                    'Authorization': 'Bearer ' + authToken
                }
            })
                .then(response => response.json())
                .then(data => {
                    // Clear the existing table rows
                    const tableBody = document.getElementById('pendingOrdersTableBody');
                    tableBody.innerHTML = '';

                    // Loop through each pending order and create a table row for each
                    data.forEach(order => {
                        const newRow = document.createElement('tr');
                        newRow.innerHTML = `
                            <td>${order.id}</td>
                            <td>${order.username}</td>
                            <td>${order.phone}</td>
                            <td>${order.title}</td>
                            <td>${order.orderStatus}</td>
                            <td><button onclick="acceptOrder(${order.id})">قبول الطلب</button></td>
                        `;
                        tableBody.appendChild(newRow);
                    });
                })
                .catch(error => console.error('Error fetching pending orders:', error));
        }

        // Call the function to fetch and populate pending orders when the page loads

        const authToken = localStorage.getItem('authToken');
        const userId = localStorage.getItem('userId'); // Assuming you store the user ID in localStorage
        console.log(authToken);
        console.log(userId);
        fetchAndPopulatePendingOrders();


        function updateDriverStatus() {
            const statusToggle = document.getElementById('statusToggle');
            const statusText = document.getElementById('statusText');
            const driverText = document.getElementById('driverText');

            const driverDto = {
                statusValue : statusToggle.checked ? true : false,
                statusTextValue : statusToggle.checked ? 'متاح' : 'مشغول'
            };

            fetch('/api/Driver/setDriverStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + authToken
                },
                body: JSON.stringify(driverDto)
            })
                .then(response => response.json())
                .then(data => {
                    statusText.innerText = data; // Assuming the response from the server is the updated driver status
                    driverText.innerText = data === 'True' ? 'تحديث حالتك يساعدنا على تحسين تجربتك. اجعل نفسك متاحًا عندما تكون جاهزًا لتسليم الشحنات.' : '';
                })
                .catch(error => console.error('Error:', error));
        }
        function acceptOrder(orderId) {
            const data = {
                orderId: orderId
            }            
            // Send an HTTP POST request to the server
            fetch('/api/Driver/selectOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + authToken
                },
                body: JSON.stringify(data)
            })
                .then(response => response)
                .then(data => {
                    // Update the status in the table
                    const statusCell = document.getElementById('status' + orderId);
                    statusCell.textContent = 'تم القبول'; // Assuming the response from the server indicates successful acceptance

                    // تحديد العناصر في السطر الحالي
                    const currentOrderRow = document.getElementById('orderRow' + orderId);
                    const orderNumber = currentOrderRow.querySelector('td:nth-child(1)').innerText;
                    const customerName = currentOrderRow.querySelector('td:nth-child(2)').innerText;
                    const phoneNumber = currentOrderRow.querySelector('td:nth-child(3)').innerText;
                    const deliveryAddress = currentOrderRow.querySelector('td:nth-child(4)').innerText;

                    // تحديد حالة الطلب
                    const orderStatus = 'تم التحميل';

                    // إضافة القيم إلى جدول الطلبيات السابقة
                    const previousOrdersTable = document.getElementById('previousOrders');
                    const newRow = document.createElement('tr');
                    newRow.innerHTML = `<td>${orderNumber}</td><td>${customerName}</td><td>${phoneNumber}</td><td>${deliveryAddress}</td><td>${orderStatus}</td>`;
                    previousOrdersTable.appendChild(newRow);

                    // حذف السطر من جدول الشحنات بحاجة للتسليم
                    const parentTableBody = currentOrderRow.parentNode;
                    parentTableBody.removeChild(currentOrderRow);

                    // تعطيل زر القبول بعد التحقق من وجود العنصر
                    const acceptButton = currentOrderRow.querySelector('button');
                    if (acceptButton) {
                        acceptButton.disabled = true;
                    }

                    // إظهار تنبيه
                    alert("تم قبول الطلب رقم " + orderId);
                })
                .catch(error => console.error('Error accepting order:', error));
        }


        function updateTimeline(eventId, orderStatus) {
            // Send an HTTP POST request to the server based on the event name
            fetch('/api/Driver/' + eventId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + authToken
                },
                body: JSON.stringify({
                    orderId: orderId // Replace 1 with the actual order ID
                })
            })
                .then(response => response.json())
                .then(data => {
                    // Update the timeline UI based on the response
                    const eventElement = document.getElementById(eventId);
                    eventElement.style.backgroundColor = "#2ecc71"; // Change background color to indicate successful update

                    // If the event is delivery and orderStatus is provided, update the status cell in the previousOrders table
                    if (eventId === "deliveryEvent" && orderStatus) {
                        const previousOrdersTable = document.getElementById('previousOrders');
                        const lastRow = previousOrdersTable.rows.length - 1;
                        const statusCell = previousOrdersTable.rows[lastRow].cells[4]; // Cell that contains the order status
                        if (statusCell) {
                            statusCell.innerText = orderStatus;
                        }
                        // Show an alert message indicating successful delivery
                        alert(`تم توصيل الطلبية بنجاح!`);
                    }
                })
                .catch(error => console.error('Error updating timeline:', error));
        }

        // Function to fetch previous orders from the server
        function fetchPreviousOrders() {
            fetch('/api/Driver/GetMyOrders', {
                headers: {
                    'Authorization': 'Bearer ' + authToken
                }
            })
                .then(response => response.json())
                .then(data => {
                    const previousOrdersTable = document.getElementById('previousOrders');

                    // Clear any existing rows from the table
                    previousOrdersTable.innerHTML = '';

                    // Iterate over the orders data and create table rows
                    data.forEach(order => {
                        const newRow = document.createElement('tr');
                        newRow.innerHTML = `
                                <td>${order.id}</td>
                                <td>${order.address.name}</td>
                                <td>${order.address.phone}</td>
                                <td>${order.address.street}</td>
                                <td>${order.orderStatus}</td>
                            `;
                        previousOrdersTable.appendChild(newRow);
                    });
                })
                .catch(error => console.error('Error fetching previous orders:', error));
        }

        // Call fetchPreviousOrders function when the page loads
        fetchPreviousOrders();
        function confirmDelivery() {
            // Get the selected delivery status (delivered or not delivered)
            const deliveryStatus = document.querySelector('input[name="deliveryStatus"]:checked').value;

            // Get the delivery person if delivered
            const deliveryPerson = deliveryStatus === 'delivered' ? document.getElementById('deliveryPerson').value : null;

            // Get the reason for not delivering if not delivered
            const reason = deliveryStatus === 'notDelivered' ? document.getElementById('reason').value : null;

            // Create the data object to send in the request body
            const data = {
                Checked: deliveryStatus === 'delivered',
                OrderId: 123, // Replace with the actual order ID
                FailDeliver: reason
            };

            // Send an HTTP POST request to the server
            fetch('/api/Driver/checkDeliverd', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + authToken
                },
                body: JSON.stringify(data)
            })
                .then(response => response)
                .then(result => {
                    // Display confirmation message based on the server response
                    const confirmationMessage = document.getElementById('confirmationMessage');
                    if (result === 'Order Has been deliverd') {
                        confirmationMessage.textContent = 'تم تأكيد التسليم بنجاح';
                    } else {
                        confirmationMessage.textContent = 'تم تحديث حالة التسليم';
                    }
                })
                .catch(error => console.error('Error confirming delivery:', error));
        }
        // Functions to show/hide instruction text
            

        function showText(elementId) {
            // Show instruction text
            document.getElementById(elementId).style.display = 'block';

            // Set a timeout to hide the text after 6000 milliseconds (6 seconds)
            // setTimeout(function () {
            //     hideText(elementId);
            // }, 6000);
        }
        showText('driverText');


        showText('shipmentsText');

        showText('ordersText');

        showText('timelineText');

        showText('confirmationText');

        
       
        function toggleForms() {
            var deliveredForm = document.getElementById('deliveredForm');
            var notDeliveredForm = document.getElementById('notDeliveredForm');
            var deliveredRadio = document.getElementById('delivered');

            if (deliveredRadio.checked) {
                deliveredForm.style.display = 'block';
                notDeliveredForm.style.display = 'none';
            } else {
                deliveredForm.style.display = 'none';
                notDeliveredForm.style.display = 'flex';
            }
        }

        function confirmDelivery() {
            var orderId = document.getElementById('orderId').value;
            var deliveredRadio = document.getElementById('delivered');
            var deliveryStatus = deliveredRadio.checked ? deliveredRadio.value : 'notDelivered';

            // التحقق من تحديد حالة التسليم قبل الاستمرار
            if (deliveryStatus === 'delivered') {
                var deliveryPerson = document.getElementById('deliveryPerson').value;
            } else {
                var reason = document.getElementById('reason').value;
            }

            // قم بإرسال هذه القيم إلى الـ API
            fetch('/api/Driver/checkDeliverd', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    orderId: orderId,
                    deliveryStatus: deliveryStatus,
                    deliveryPerson: deliveryPerson,
                    reason: reason
                }),
            })
                .then(response => response.json())
                .then(data => {
                    updatePage(data.message, data.deliveryStatus, data.receiverName, data.reason);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function updatePage(message, deliveryStatus, receiverName, reason) {
            var confirmationMessageElement = document.getElementById('confirmationMessage');
            confirmationMessageElement.innerText = message;

            var deliveryStatusElement = document.getElementById('deliveryStatus');
            var receiverNameElement = document.getElementById('receiverName');
            var reasonElement = document.getElementById('reason');

            // إظهار أو إخفاء الحقل المرتبط بسبب عدم التسليم بناءً على اختيار المستخدم
            reasonElement.style.display = (deliveryStatus === 'notDelivered') ? 'block' : 'none';

            // تحديث حالة التسليم بناءً على القيمة التي تم استلامها من الـ API
            deliveryStatusElement.innerText = (deliveryStatus === 'delivered') ? 'تم التسليم' : 'لم يتم التسليم';

            // إذا تم التسليم، قم بإظهار اسم الشخص الذي قام بالاستلام
            receiverNameElement.innerText = (deliveryStatus === 'delivered') ? 'المستلم: ' + receiverName : '';

            // إذا لم يتم التسليم، قم بإظهار السبب
            reasonElement.innerText = (deliveryStatus === 'notDelivered') ? 'سبب عدم التسليم: ' + reason : '';
        }
        function logout() {
            // حذف الـ token من الجلسة
            localStorage.removeItem('authToken');

            // توجيه المستخدم إلى الصفحة الرئيسية أو أي صفحة أخرى
            window.location.href = "front_home";
        }


    </script>
</body>

</html>
